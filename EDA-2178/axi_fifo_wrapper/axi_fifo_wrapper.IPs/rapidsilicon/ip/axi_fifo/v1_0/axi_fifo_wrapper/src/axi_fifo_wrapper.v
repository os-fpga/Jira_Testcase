// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : axi_fifo_wrapper.v
// Device     : gemini
// LiteX sha1 : --------
// Date       : 2023-10-31 12:29:25
//------------------------------------------------------------------------------
// This file is Copyright (c) 2022 RapidSilicon
//--------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module axi_fifo_wrapper #(
	parameter IP_TYPE 		= "AXI_FIFO",
	parameter IP_VERSION 	= 32'h1, 
	parameter IP_ID 		= 32'h3fa0759
)
(    input  wire          clk,
    input  wire          rst,
    input  wire          s_axi_awvalid,
    output wire          s_axi_awready,
    input  wire   [31:0] s_axi_awaddr,
    input  wire    [1:0] s_axi_awburst,
    input  wire    [7:0] s_axi_awlen,
    input  wire    [2:0] s_axi_awsize,
    input  wire          s_axi_awlock,
    input  wire    [2:0] s_axi_awprot,
    input  wire    [3:0] s_axi_awcache,
    input  wire    [3:0] s_axi_awqos,
    input  wire    [3:0] s_axi_awregion,
    input  wire          s_axi_awid,
    input  wire          s_axi_awuser,
    input  wire          s_axi_wvalid,
    output wire          s_axi_wready,
    input  wire          s_axi_wlast,
    input  wire   [31:0] s_axi_wdata,
    input  wire    [3:0] s_axi_wstrb,
    input  wire          s_axi_wuser,
    output wire          s_axi_bvalid,
    input  wire          s_axi_bready,
    output wire    [1:0] s_axi_bresp,
    output wire          s_axi_bid,
    output wire          s_axi_buser,
    input  wire          s_axi_arvalid,
    output wire          s_axi_arready,
    input  wire   [31:0] s_axi_araddr,
    input  wire    [1:0] s_axi_arburst,
    input  wire    [7:0] s_axi_arlen,
    input  wire    [2:0] s_axi_arsize,
    input  wire          s_axi_arlock,
    input  wire    [2:0] s_axi_arprot,
    input  wire    [3:0] s_axi_arcache,
    input  wire    [3:0] s_axi_arqos,
    input  wire    [3:0] s_axi_arregion,
    input  wire          s_axi_arid,
    input  wire          s_axi_aruser,
    output wire          s_axi_rvalid,
    input  wire          s_axi_rready,
    output wire          s_axi_rlast,
    output wire    [1:0] s_axi_rresp,
    output wire   [31:0] s_axi_rdata,
    output wire          s_axi_rid,
    output wire          s_axi_ruser,
    output wire          m_axi_awvalid,
    input  wire          m_axi_awready,
    output wire   [31:0] m_axi_awaddr,
    output wire    [1:0] m_axi_awburst,
    output wire    [7:0] m_axi_awlen,
    output wire    [2:0] m_axi_awsize,
    output wire          m_axi_awlock,
    output wire    [2:0] m_axi_awprot,
    output wire    [3:0] m_axi_awcache,
    output wire    [3:0] m_axi_awqos,
    output wire    [3:0] m_axi_awregion,
    output wire          m_axi_awid,
    output wire          m_axi_awuser,
    output wire          m_axi_wvalid,
    input  wire          m_axi_wready,
    output wire          m_axi_wlast,
    output wire   [31:0] m_axi_wdata,
    output wire    [3:0] m_axi_wstrb,
    output wire          m_axi_wuser,
    input  wire          m_axi_bvalid,
    output wire          m_axi_bready,
    input  wire    [1:0] m_axi_bresp,
    input  wire          m_axi_bid,
    input  wire          m_axi_buser,
    output wire          m_axi_arvalid,
    input  wire          m_axi_arready,
    output wire   [31:0] m_axi_araddr,
    output wire    [1:0] m_axi_arburst,
    output wire    [7:0] m_axi_arlen,
    output wire    [2:0] m_axi_arsize,
    output wire          m_axi_arlock,
    output wire    [2:0] m_axi_arprot,
    output wire    [3:0] m_axi_arcache,
    output wire    [3:0] m_axi_arqos,
    output wire    [3:0] m_axi_arregion,
    output wire          m_axi_arid,
    output wire          m_axi_aruser,
    input  wire          m_axi_rvalid,
    output wire          m_axi_rready,
    input  wire          m_axi_rlast,
    input  wire    [1:0] m_axi_rresp,
    input  wire   [31:0] m_axi_rdata,
    input  wire          m_axi_rid,
    input  wire          m_axi_ruser
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          sys_clk;
wire          sys_rst;
wire          s_axi_aw_valid;
wire          s_axi_aw_ready;
wire   [31:0] s_axi_aw_payload_addr;
wire    [1:0] s_axi_aw_payload_burst;
wire    [7:0] s_axi_aw_payload_len;
wire    [2:0] s_axi_aw_payload_size;
wire          s_axi_aw_payload_lock;
wire    [2:0] s_axi_aw_payload_prot;
wire    [3:0] s_axi_aw_payload_cache;
wire    [3:0] s_axi_aw_payload_qos;
wire    [3:0] s_axi_aw_payload_region;
wire          s_axi_aw_param_id;
wire          s_axi_aw_param_user;
wire          s_axi_w_valid;
wire          s_axi_w_ready;
wire          s_axi_w_last;
wire   [31:0] s_axi_w_payload_data;
wire    [3:0] s_axi_w_payload_strb;
wire          s_axi_w_param_user;
wire          s_axi_b_valid;
wire          s_axi_b_ready;
wire    [1:0] s_axi_b_payload_resp;
wire          s_axi_b_param_id;
wire          s_axi_b_param_user;
wire          s_axi_ar_valid;
wire          s_axi_ar_ready;
wire   [31:0] s_axi_ar_payload_addr;
wire    [1:0] s_axi_ar_payload_burst;
wire    [7:0] s_axi_ar_payload_len;
wire    [2:0] s_axi_ar_payload_size;
wire          s_axi_ar_payload_lock;
wire    [2:0] s_axi_ar_payload_prot;
wire    [3:0] s_axi_ar_payload_cache;
wire    [3:0] s_axi_ar_payload_qos;
wire    [3:0] s_axi_ar_payload_region;
wire          s_axi_ar_param_id;
wire          s_axi_ar_param_user;
wire          s_axi_r_valid;
wire          s_axi_r_ready;
wire          s_axi_r_last;
wire    [1:0] s_axi_r_payload_resp;
wire   [31:0] s_axi_r_payload_data;
wire          s_axi_r_param_id;
wire          s_axi_r_param_user;
wire          m_axi_aw_valid;
wire          m_axi_aw_ready;
wire   [31:0] m_axi_aw_payload_addr;
wire    [1:0] m_axi_aw_payload_burst;
wire    [7:0] m_axi_aw_payload_len;
wire    [2:0] m_axi_aw_payload_size;
wire          m_axi_aw_payload_lock;
wire    [2:0] m_axi_aw_payload_prot;
wire    [3:0] m_axi_aw_payload_cache;
wire    [3:0] m_axi_aw_payload_qos;
wire    [3:0] m_axi_aw_payload_region;
wire          m_axi_aw_param_id;
wire          m_axi_aw_param_user;
wire          m_axi_w_valid;
wire          m_axi_w_ready;
wire          m_axi_w_last;
wire   [31:0] m_axi_w_payload_data;
wire    [3:0] m_axi_w_payload_strb;
wire          m_axi_w_param_user;
wire          m_axi_b_valid;
wire          m_axi_b_ready;
wire    [1:0] m_axi_b_payload_resp;
wire          m_axi_b_param_id;
wire          m_axi_b_param_user;
wire          m_axi_ar_valid;
wire          m_axi_ar_ready;
wire   [31:0] m_axi_ar_payload_addr;
wire    [1:0] m_axi_ar_payload_burst;
wire    [7:0] m_axi_ar_payload_len;
wire    [2:0] m_axi_ar_payload_size;
wire          m_axi_ar_payload_lock;
wire    [2:0] m_axi_ar_payload_prot;
wire    [3:0] m_axi_ar_payload_cache;
wire    [3:0] m_axi_ar_payload_qos;
wire    [3:0] m_axi_ar_payload_region;
wire          m_axi_ar_param_id;
wire          m_axi_ar_param_user;
wire          m_axi_r_valid;
wire          m_axi_r_ready;
wire          m_axi_r_last;
wire    [1:0] m_axi_r_payload_resp;
wire   [31:0] m_axi_r_payload_data;
wire          m_axi_r_param_id;
wire          m_axi_r_param_user;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign sys_clk = clk;
assign sys_rst = rst;
assign s_axi_aw_valid = s_axi_awvalid;
assign s_axi_aw_payload_addr = s_axi_awaddr;
assign s_axi_aw_payload_burst = s_axi_awburst;
assign s_axi_aw_payload_len = s_axi_awlen;
assign s_axi_aw_payload_size = s_axi_awsize;
assign s_axi_aw_payload_lock = s_axi_awlock;
assign s_axi_aw_payload_prot = s_axi_awprot;
assign s_axi_aw_payload_cache = s_axi_awcache;
assign s_axi_aw_payload_qos = s_axi_awqos;
assign s_axi_aw_payload_region = s_axi_awregion;
assign s_axi_aw_param_id = s_axi_awid;
assign s_axi_aw_param_user = s_axi_awuser;
assign s_axi_awready = s_axi_aw_ready;
assign s_axi_w_valid = s_axi_wvalid;
assign s_axi_w_payload_data = s_axi_wdata;
assign s_axi_w_payload_strb = s_axi_wstrb;
assign s_axi_w_param_user = s_axi_wuser;
assign s_axi_w_last = s_axi_wlast;
assign s_axi_wready = s_axi_w_ready;
assign s_axi_bvalid = s_axi_b_valid;
assign s_axi_bresp = s_axi_b_payload_resp;
assign s_axi_bid = s_axi_b_param_id;
assign s_axi_buser = s_axi_b_param_user;
assign s_axi_b_ready = s_axi_bready;
assign s_axi_ar_valid = s_axi_arvalid;
assign s_axi_ar_payload_addr = s_axi_araddr;
assign s_axi_ar_payload_burst = s_axi_arburst;
assign s_axi_ar_payload_len = s_axi_arlen;
assign s_axi_ar_payload_size = s_axi_arsize;
assign s_axi_ar_payload_lock = s_axi_arlock;
assign s_axi_ar_payload_prot = s_axi_arprot;
assign s_axi_ar_payload_cache = s_axi_arcache;
assign s_axi_ar_payload_qos = s_axi_arqos;
assign s_axi_ar_payload_region = s_axi_arregion;
assign s_axi_ar_param_id = s_axi_arid;
assign s_axi_ar_param_user = s_axi_aruser;
assign s_axi_arready = s_axi_ar_ready;
assign s_axi_rvalid = s_axi_r_valid;
assign s_axi_rresp = s_axi_r_payload_resp;
assign s_axi_rdata = s_axi_r_payload_data;
assign s_axi_rid = s_axi_r_param_id;
assign s_axi_ruser = s_axi_r_param_user;
assign s_axi_rlast = s_axi_r_last;
assign s_axi_r_ready = s_axi_rready;
assign m_axi_awvalid = m_axi_aw_valid;
assign m_axi_awaddr = m_axi_aw_payload_addr;
assign m_axi_awburst = m_axi_aw_payload_burst;
assign m_axi_awlen = m_axi_aw_payload_len;
assign m_axi_awsize = m_axi_aw_payload_size;
assign m_axi_awlock = m_axi_aw_payload_lock;
assign m_axi_awprot = m_axi_aw_payload_prot;
assign m_axi_awcache = m_axi_aw_payload_cache;
assign m_axi_awqos = m_axi_aw_payload_qos;
assign m_axi_awregion = m_axi_aw_payload_region;
assign m_axi_awid = m_axi_aw_param_id;
assign m_axi_awuser = m_axi_aw_param_user;
assign m_axi_aw_ready = m_axi_awready;
assign m_axi_wvalid = m_axi_w_valid;
assign m_axi_wdata = m_axi_w_payload_data;
assign m_axi_wstrb = m_axi_w_payload_strb;
assign m_axi_wuser = m_axi_w_param_user;
assign m_axi_wlast = m_axi_w_last;
assign m_axi_w_ready = m_axi_wready;
assign m_axi_b_valid = m_axi_bvalid;
assign m_axi_b_payload_resp = m_axi_bresp;
assign m_axi_b_param_id = m_axi_bid;
assign m_axi_b_param_user = m_axi_buser;
assign m_axi_bready = m_axi_b_ready;
assign m_axi_arvalid = m_axi_ar_valid;
assign m_axi_araddr = m_axi_ar_payload_addr;
assign m_axi_arburst = m_axi_ar_payload_burst;
assign m_axi_arlen = m_axi_ar_payload_len;
assign m_axi_arsize = m_axi_ar_payload_size;
assign m_axi_arlock = m_axi_ar_payload_lock;
assign m_axi_arprot = m_axi_ar_payload_prot;
assign m_axi_arcache = m_axi_ar_payload_cache;
assign m_axi_arqos = m_axi_ar_payload_qos;
assign m_axi_arregion = m_axi_ar_payload_region;
assign m_axi_arid = m_axi_ar_param_id;
assign m_axi_aruser = m_axi_ar_param_user;
assign m_axi_ar_ready = m_axi_arready;
assign m_axi_r_valid = m_axi_rvalid;
assign m_axi_r_payload_resp = m_axi_rresp;
assign m_axi_r_payload_data = m_axi_rdata;
assign m_axi_r_param_id = m_axi_rid;
assign m_axi_r_param_user = m_axi_ruser;
assign m_axi_r_last = m_axi_rlast;
assign m_axi_rready = m_axi_r_ready;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

axi_fifo #(
	.ADDR_WIDTH(32),
	.ARUSER_ENABLE(1'd0),
	.ARUSER_WIDTH(1),
	.AWUSER_ENABLE(1'd0),
	.AWUSER_WIDTH(1),
	.BUSER_ENABLE(1'd0),
	.BUSER_WIDTH(1),
	.DATA_WIDTH(32),
	.ID_WIDTH(1),
	.IP_ID(IP_ID),
	.IP_TYPE(IP_TYPE),
	.IP_VERSION(IP_VERSION),
	.READ_FIFO_DELAY(1'd0),
	.READ_FIFO_DEPTH(0),
	.RUSER_ENABLE(1'd0),
	.RUSER_WIDTH(1),
	.WRITE_FIFO_DELAY(1'd0),
	.WRITE_FIFO_DEPTH(0),
	.WUSER_ENABLE(1'd0),
	.WUSER_WIDTH(1)
) axi_fifo (
	.clk(sys_clk),
	.m_axi_arready(m_axi_ar_ready),
	.m_axi_awready(m_axi_aw_ready),
	.m_axi_bid(m_axi_b_param_id),
	.m_axi_bresp(m_axi_b_payload_resp),
	.m_axi_buser(m_axi_b_param_user),
	.m_axi_bvalid(m_axi_b_valid),
	.m_axi_rdata(m_axi_r_payload_data),
	.m_axi_rid(m_axi_r_param_id),
	.m_axi_rlast(m_axi_r_last),
	.m_axi_rresp(m_axi_r_payload_resp),
	.m_axi_ruser(m_axi_r_param_user),
	.m_axi_rvalid(m_axi_r_valid),
	.m_axi_wready(m_axi_w_ready),
	.rst(sys_rst),
	.s_axi_araddr(s_axi_ar_payload_addr),
	.s_axi_arburst(s_axi_ar_payload_burst),
	.s_axi_arcache(s_axi_ar_payload_cache),
	.s_axi_arid(s_axi_ar_param_id),
	.s_axi_arlen(s_axi_ar_payload_len),
	.s_axi_arlock(s_axi_ar_payload_lock),
	.s_axi_arprot(s_axi_ar_payload_prot),
	.s_axi_arqos(s_axi_ar_payload_qos),
	.s_axi_arregion(s_axi_ar_payload_region),
	.s_axi_arsize(s_axi_ar_payload_size),
	.s_axi_aruser(s_axi_ar_param_user),
	.s_axi_arvalid(s_axi_ar_valid),
	.s_axi_awaddr(s_axi_aw_payload_addr),
	.s_axi_awburst(s_axi_aw_payload_burst),
	.s_axi_awcache(s_axi_aw_payload_cache),
	.s_axi_awid(s_axi_aw_param_id),
	.s_axi_awlen(s_axi_aw_payload_len),
	.s_axi_awlock(s_axi_aw_payload_lock),
	.s_axi_awprot(s_axi_aw_payload_prot),
	.s_axi_awqos(s_axi_aw_payload_qos),
	.s_axi_awregion(s_axi_aw_payload_region),
	.s_axi_awsize(s_axi_aw_payload_size),
	.s_axi_awuser(s_axi_aw_param_user),
	.s_axi_awvalid(s_axi_aw_valid),
	.s_axi_bready(s_axi_b_ready),
	.s_axi_rready(s_axi_r_ready),
	.s_axi_wdata(s_axi_w_payload_data),
	.s_axi_wlast(s_axi_w_last),
	.s_axi_wstrb(s_axi_w_payload_strb),
	.s_axi_wuser(s_axi_w_param_user),
	.s_axi_wvalid(s_axi_w_valid),
	.m_axi_araddr(m_axi_ar_payload_addr),
	.m_axi_arburst(m_axi_ar_payload_burst),
	.m_axi_arcache(m_axi_ar_payload_cache),
	.m_axi_arid(m_axi_ar_param_id),
	.m_axi_arlen(m_axi_ar_payload_len),
	.m_axi_arlock(m_axi_ar_payload_lock),
	.m_axi_arprot(m_axi_ar_payload_prot),
	.m_axi_arqos(m_axi_ar_payload_qos),
	.m_axi_arregion(m_axi_ar_payload_region),
	.m_axi_arsize(m_axi_ar_payload_size),
	.m_axi_aruser(m_axi_ar_param_user),
	.m_axi_arvalid(m_axi_ar_valid),
	.m_axi_awaddr(m_axi_aw_payload_addr),
	.m_axi_awburst(m_axi_aw_payload_burst),
	.m_axi_awcache(m_axi_aw_payload_cache),
	.m_axi_awid(m_axi_aw_param_id),
	.m_axi_awlen(m_axi_aw_payload_len),
	.m_axi_awlock(m_axi_aw_payload_lock),
	.m_axi_awprot(m_axi_aw_payload_prot),
	.m_axi_awqos(m_axi_aw_payload_qos),
	.m_axi_awregion(m_axi_aw_payload_region),
	.m_axi_awsize(m_axi_aw_payload_size),
	.m_axi_awuser(m_axi_aw_param_user),
	.m_axi_awvalid(m_axi_aw_valid),
	.m_axi_bready(m_axi_b_ready),
	.m_axi_rready(m_axi_r_ready),
	.m_axi_wdata(m_axi_w_payload_data),
	.m_axi_wlast(m_axi_w_last),
	.m_axi_wstrb(m_axi_w_payload_strb),
	.m_axi_wuser(m_axi_w_param_user),
	.m_axi_wvalid(m_axi_w_valid),
	.s_axi_arready(s_axi_ar_ready),
	.s_axi_awready(s_axi_aw_ready),
	.s_axi_bid(s_axi_b_param_id),
	.s_axi_bresp(s_axi_b_payload_resp),
	.s_axi_buser(s_axi_b_param_user),
	.s_axi_bvalid(s_axi_b_valid),
	.s_axi_rdata(s_axi_r_payload_data),
	.s_axi_rid(s_axi_r_param_id),
	.s_axi_rlast(s_axi_r_last),
	.s_axi_rresp(s_axi_r_payload_resp),
	.s_axi_ruser(s_axi_r_param_user),
	.s_axi_rvalid(s_axi_r_valid),
	.s_axi_wready(s_axi_w_ready)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-10-31 12:29:25.
//------------------------------------------------------------------------------
