// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : ocm_sp_10x32768_v1_0.v
// Device     : gemini
// LiteX sha1 : --------
// Date       : 2024-07-29 14:59:55
//------------------------------------------------------------------------------
// This file is Copyright (c) 2022 RapidSilicon
//--------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module ocm_sp_10x32768 #(
	parameter IP_TYPE 		= "OCM",
	parameter IP_VERSION 	= 32'h1, 
	parameter IP_ID 		= 32'h5d72ef7
)
(
    input  wire   [14:0] addr_A,
    input  wire    [9:0] din_A,
    input  wire          clk_A,
    input  wire          wen_A,
    input  wire          ren_A,
    output wire    [9:0] dout_A
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

reg           sys_clk = 1'd0;
wire          A_clk;
wire   [14:0] addr_A_1;
wire    [9:0] din_A_1;
reg     [9:0] dout_A_1 = 10'd0;
reg     [9:0] dout_A_ = 10'd0;
reg     [9:0] dout_A_reg = 10'd0;
wire          wen_A_1;
wire          ren_A_1;
reg           ren_A_reg = 1'd0;
wire   [31:0] bram_out_A0;
wire   [31:0] bram_out_A1;
wire   [31:0] bram_out_A2;
wire   [31:0] bram_out_A3;
wire   [31:0] bram_out_A4;
wire   [31:0] bram_out_A5;
wire   [31:0] bram_out_A6;
wire   [31:0] bram_out_A7;
wire   [31:0] bram_out_A8;
wire   [31:0] bram_out_A9;
wire   [31:0] bram_out_B0;
wire   [31:0] bram_out_B1;
wire   [31:0] bram_out_B2;
wire   [31:0] bram_out_B3;
wire   [31:0] bram_out_B4;
wire   [31:0] bram_out_B5;
wire   [31:0] bram_out_B6;
wire   [31:0] bram_out_B7;
wire   [31:0] bram_out_B8;
wire   [31:0] bram_out_B9;
wire    [3:0] rparity_A0;
wire    [3:0] rparity_A1;
wire    [3:0] rparity_A2;
wire    [3:0] rparity_A3;
wire    [3:0] rparity_A4;
wire    [3:0] rparity_A5;
wire    [3:0] rparity_A6;
wire    [3:0] rparity_A7;
wire    [3:0] rparity_A8;
wire    [3:0] rparity_A9;
wire    [3:0] rparity_B0;
wire    [3:0] rparity_B1;
wire    [3:0] rparity_B2;
wire    [3:0] rparity_B3;
wire    [3:0] rparity_B4;
wire    [3:0] rparity_B5;
wire    [3:0] rparity_B6;
wire    [3:0] rparity_B7;
wire    [3:0] rparity_B8;
wire    [3:0] rparity_B9;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign addr_A_1 = addr_A;
assign din_A_1 = din_A;
assign A_clk = clk_A;
assign wen_A_1 = wen_A;
assign ren_A_1 = ren_A;
assign dout_A = dout_A_;
always @(*) begin
    dout_A_ <= 10'd0;
    if (ren_A_reg) begin
        dout_A_ <= dout_A_1;
    end else begin
        dout_A_ <= dout_A_reg;
    end
end
always @(*) begin
    dout_A_1 <= 10'd0;
    dout_A_1[0] <= {bram_out_A0[0]};
    dout_A_1[1] <= {bram_out_A1[0]};
    dout_A_1[2] <= {bram_out_A2[0]};
    dout_A_1[3] <= {bram_out_A3[0]};
    dout_A_1[4] <= {bram_out_A4[0]};
    dout_A_1[5] <= {bram_out_A5[0]};
    dout_A_1[6] <= {bram_out_A6[0]};
    dout_A_1[7] <= {bram_out_A7[0]};
    dout_A_1[8] <= {bram_out_A8[0]};
    dout_A_1[9] <= {bram_out_A9[0]};
end


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------

always @(posedge A_clk) begin
    if (ren_A_reg) begin
        dout_A_reg <= dout_A_1;
    end
    ren_A_reg <= ren_A_1;
end


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

TDP_RAM36K #(
	.INIT(32768'h0),
	.INIT_PARITY(4096'h0),
	.READ_WIDTH_A(1'd1),
	.READ_WIDTH_B(1'd1),
	.WRITE_WIDTH_A(1'd1),
	.WRITE_WIDTH_B(1'd1)
) SP_MEM (
	.ADDR_A({addr_A_1[14:0], {0{1'd0}}}),
	.ADDR_B({15{1'd0}}),
	.BE_A({4{1'd1}}),
	.BE_B({4{1'd0}}),
	.CLK_A(sys_clk),
	.CLK_B(1'd0),
	.REN_A(ren_A_1),
	.REN_B(1'd0),
	.WDATA_A(din_A_1[0]),
	.WDATA_B({32{1'd0}}),
	.WEN_A(wen_A_1),
	.WEN_B(1'd0),
	.WPARITY_A({4{1'd0}}),
	.WPARITY_B({4{1'd0}}),
	.RDATA_A(bram_out_A0[31:0]),
	.RDATA_B(bram_out_B0[31:0]),
	.RPARITY_A(rparity_A0[3:0]),
	.RPARITY_B(rparity_B0[3:0])
);

TDP_RAM36K #(
	.INIT(32768'h0),
	.INIT_PARITY(4096'h0),
	.READ_WIDTH_A(1'd1),
	.READ_WIDTH_B(1'd1),
	.WRITE_WIDTH_A(1'd1),
	.WRITE_WIDTH_B(1'd1)
) SP_MEM_1 (
	.ADDR_A({addr_A_1[14:0], {0{1'd0}}}),
	.ADDR_B({15{1'd0}}),
	.BE_A({4{1'd1}}),
	.BE_B({4{1'd0}}),
	.CLK_A(sys_clk),
	.CLK_B(1'd0),
	.REN_A(ren_A_1),
	.REN_B(1'd0),
	.WDATA_A(din_A_1[1]),
	.WDATA_B({32{1'd0}}),
	.WEN_A(wen_A_1),
	.WEN_B(1'd0),
	.WPARITY_A({4{1'd0}}),
	.WPARITY_B({4{1'd0}}),
	.RDATA_A(bram_out_A1[31:0]),
	.RDATA_B(bram_out_B1[31:0]),
	.RPARITY_A(rparity_A1[3:0]),
	.RPARITY_B(rparity_B1[3:0])
);

TDP_RAM36K #(
	.INIT(32768'h0),
	.INIT_PARITY(4096'h0),
	.READ_WIDTH_A(1'd1),
	.READ_WIDTH_B(1'd1),
	.WRITE_WIDTH_A(1'd1),
	.WRITE_WIDTH_B(1'd1)
) SP_MEM_2 (
	.ADDR_A({addr_A_1[14:0], {0{1'd0}}}),
	.ADDR_B({15{1'd0}}),
	.BE_A({4{1'd1}}),
	.BE_B({4{1'd0}}),
	.CLK_A(sys_clk),
	.CLK_B(1'd0),
	.REN_A(ren_A_1),
	.REN_B(1'd0),
	.WDATA_A(din_A_1[2]),
	.WDATA_B({32{1'd0}}),
	.WEN_A(wen_A_1),
	.WEN_B(1'd0),
	.WPARITY_A({4{1'd0}}),
	.WPARITY_B({4{1'd0}}),
	.RDATA_A(bram_out_A2[31:0]),
	.RDATA_B(bram_out_B2[31:0]),
	.RPARITY_A(rparity_A2[3:0]),
	.RPARITY_B(rparity_B2[3:0])
);

TDP_RAM36K #(
	.INIT(32768'h0),
	.INIT_PARITY(4096'h0),
	.READ_WIDTH_A(1'd1),
	.READ_WIDTH_B(1'd1),
	.WRITE_WIDTH_A(1'd1),
	.WRITE_WIDTH_B(1'd1)
) SP_MEM_3 (
	.ADDR_A({addr_A_1[14:0], {0{1'd0}}}),
	.ADDR_B({15{1'd0}}),
	.BE_A({4{1'd1}}),
	.BE_B({4{1'd0}}),
	.CLK_A(sys_clk),
	.CLK_B(1'd0),
	.REN_A(ren_A_1),
	.REN_B(1'd0),
	.WDATA_A(din_A_1[3]),
	.WDATA_B({32{1'd0}}),
	.WEN_A(wen_A_1),
	.WEN_B(1'd0),
	.WPARITY_A({4{1'd0}}),
	.WPARITY_B({4{1'd0}}),
	.RDATA_A(bram_out_A3[31:0]),
	.RDATA_B(bram_out_B3[31:0]),
	.RPARITY_A(rparity_A3[3:0]),
	.RPARITY_B(rparity_B3[3:0])
);

TDP_RAM36K #(
	.INIT(32768'h0),
	.INIT_PARITY(4096'h0),
	.READ_WIDTH_A(1'd1),
	.READ_WIDTH_B(1'd1),
	.WRITE_WIDTH_A(1'd1),
	.WRITE_WIDTH_B(1'd1)
) SP_MEM_4 (
	.ADDR_A({addr_A_1[14:0], {0{1'd0}}}),
	.ADDR_B({15{1'd0}}),
	.BE_A({4{1'd1}}),
	.BE_B({4{1'd0}}),
	.CLK_A(sys_clk),
	.CLK_B(1'd0),
	.REN_A(ren_A_1),
	.REN_B(1'd0),
	.WDATA_A(din_A_1[4]),
	.WDATA_B({32{1'd0}}),
	.WEN_A(wen_A_1),
	.WEN_B(1'd0),
	.WPARITY_A({4{1'd0}}),
	.WPARITY_B({4{1'd0}}),
	.RDATA_A(bram_out_A4[31:0]),
	.RDATA_B(bram_out_B4[31:0]),
	.RPARITY_A(rparity_A4[3:0]),
	.RPARITY_B(rparity_B4[3:0])
);

TDP_RAM36K #(
	.INIT(32768'h0),
	.INIT_PARITY(4096'h0),
	.READ_WIDTH_A(1'd1),
	.READ_WIDTH_B(1'd1),
	.WRITE_WIDTH_A(1'd1),
	.WRITE_WIDTH_B(1'd1)
) SP_MEM_5 (
	.ADDR_A({addr_A_1[14:0], {0{1'd0}}}),
	.ADDR_B({15{1'd0}}),
	.BE_A({4{1'd1}}),
	.BE_B({4{1'd0}}),
	.CLK_A(sys_clk),
	.CLK_B(1'd0),
	.REN_A(ren_A_1),
	.REN_B(1'd0),
	.WDATA_A(din_A_1[5]),
	.WDATA_B({32{1'd0}}),
	.WEN_A(wen_A_1),
	.WEN_B(1'd0),
	.WPARITY_A({4{1'd0}}),
	.WPARITY_B({4{1'd0}}),
	.RDATA_A(bram_out_A5[31:0]),
	.RDATA_B(bram_out_B5[31:0]),
	.RPARITY_A(rparity_A5[3:0]),
	.RPARITY_B(rparity_B5[3:0])
);

TDP_RAM36K #(
	.INIT(32768'h0),
	.INIT_PARITY(4096'h0),
	.READ_WIDTH_A(1'd1),
	.READ_WIDTH_B(1'd1),
	.WRITE_WIDTH_A(1'd1),
	.WRITE_WIDTH_B(1'd1)
) SP_MEM_6 (
	.ADDR_A({addr_A_1[14:0], {0{1'd0}}}),
	.ADDR_B({15{1'd0}}),
	.BE_A({4{1'd1}}),
	.BE_B({4{1'd0}}),
	.CLK_A(sys_clk),
	.CLK_B(1'd0),
	.REN_A(ren_A_1),
	.REN_B(1'd0),
	.WDATA_A(din_A_1[6]),
	.WDATA_B({32{1'd0}}),
	.WEN_A(wen_A_1),
	.WEN_B(1'd0),
	.WPARITY_A({4{1'd0}}),
	.WPARITY_B({4{1'd0}}),
	.RDATA_A(bram_out_A6[31:0]),
	.RDATA_B(bram_out_B6[31:0]),
	.RPARITY_A(rparity_A6[3:0]),
	.RPARITY_B(rparity_B6[3:0])
);

TDP_RAM36K #(
	.INIT(32768'h0),
	.INIT_PARITY(4096'h0),
	.READ_WIDTH_A(1'd1),
	.READ_WIDTH_B(1'd1),
	.WRITE_WIDTH_A(1'd1),
	.WRITE_WIDTH_B(1'd1)
) SP_MEM_7 (
	.ADDR_A({addr_A_1[14:0], {0{1'd0}}}),
	.ADDR_B({15{1'd0}}),
	.BE_A({4{1'd1}}),
	.BE_B({4{1'd0}}),
	.CLK_A(sys_clk),
	.CLK_B(1'd0),
	.REN_A(ren_A_1),
	.REN_B(1'd0),
	.WDATA_A(din_A_1[7]),
	.WDATA_B({32{1'd0}}),
	.WEN_A(wen_A_1),
	.WEN_B(1'd0),
	.WPARITY_A({4{1'd0}}),
	.WPARITY_B({4{1'd0}}),
	.RDATA_A(bram_out_A7[31:0]),
	.RDATA_B(bram_out_B7[31:0]),
	.RPARITY_A(rparity_A7[3:0]),
	.RPARITY_B(rparity_B7[3:0])
);

TDP_RAM36K #(
	.INIT(32768'h0),
	.INIT_PARITY(4096'h0),
	.READ_WIDTH_A(1'd1),
	.READ_WIDTH_B(1'd1),
	.WRITE_WIDTH_A(1'd1),
	.WRITE_WIDTH_B(1'd1)
) SP_MEM_8 (
	.ADDR_A({addr_A_1[14:0], {0{1'd0}}}),
	.ADDR_B({15{1'd0}}),
	.BE_A({4{1'd1}}),
	.BE_B({4{1'd0}}),
	.CLK_A(sys_clk),
	.CLK_B(1'd0),
	.REN_A(ren_A_1),
	.REN_B(1'd0),
	.WDATA_A(din_A_1[8]),
	.WDATA_B({32{1'd0}}),
	.WEN_A(wen_A_1),
	.WEN_B(1'd0),
	.WPARITY_A({4{1'd0}}),
	.WPARITY_B({4{1'd0}}),
	.RDATA_A(bram_out_A8[31:0]),
	.RDATA_B(bram_out_B8[31:0]),
	.RPARITY_A(rparity_A8[3:0]),
	.RPARITY_B(rparity_B8[3:0])
);

TDP_RAM36K #(
	.INIT(32768'h0),
	.INIT_PARITY(4096'h0),
	.READ_WIDTH_A(1'd1),
	.READ_WIDTH_B(1'd1),
	.WRITE_WIDTH_A(1'd1),
	.WRITE_WIDTH_B(1'd1)
) SP_MEM_9 (
	.ADDR_A({addr_A_1[14:0], {0{1'd0}}}),
	.ADDR_B({15{1'd0}}),
	.BE_A({4{1'd1}}),
	.BE_B({4{1'd0}}),
	.CLK_A(sys_clk),
	.CLK_B(1'd0),
	.REN_A(ren_A_1),
	.REN_B(1'd0),
	.WDATA_A(din_A_1[9]),
	.WDATA_B({32{1'd0}}),
	.WEN_A(wen_A_1),
	.WEN_B(1'd0),
	.WPARITY_A({4{1'd0}}),
	.WPARITY_B({4{1'd0}}),
	.RDATA_A(bram_out_A9[31:0]),
	.RDATA_B(bram_out_B9[31:0]),
	.RPARITY_A(rparity_A9[3:0]),
	.RPARITY_B(rparity_B9[3:0])
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2024-07-29 14:59:55.
//------------------------------------------------------------------------------
