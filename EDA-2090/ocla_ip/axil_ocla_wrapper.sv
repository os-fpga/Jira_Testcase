// -----------------------------------------------------------------------------
// Auto-Generated by:        __   _ __      _  __
//                          / /  (_) /____ | |/_/
//                         / /__/ / __/ -_)>  <
//                        /____/_/\__/\__/_/|_|
//                     Build your hardware, easily!
//                   https://github.com/enjoy-digital/litex
//
// Filename   : axil_ocla_wrapper.v
// Device     : gemini
// LiteX sha1 : dcb54b85
// Date       : 2023-09-24 23:05:07
//------------------------------------------------------------------------------
// This file is Copyright (c) 2022 RapidSilicon
//--------------------------------------------------------------------------------

`timescale 1ns / 1ps

//------------------------------------------------------------------------------
// Module
//------------------------------------------------------------------------------

module axil_ocla_wrapper #(
	parameter IP_TYPE 		= "OCLA",
	parameter IP_VERSION 	= 32'h1, 
	parameter IP_ID 		= 32'h389b147
)
(    input  wire          i_S_AXI_ACLK,
    input  wire          i_S_AXI_ARESETN,
    input  wire          i_sample_clk,
    input  wire          i_rstn,
    input  wire          s_axil_awvalid,
    output wire          s_axil_awready,
    input  wire   [31:0] s_axil_awaddr,
    input  wire    [2:0] s_axil_awprot,
    input  wire          s_axil_wvalid,
    output wire          s_axil_wready,
    input  wire   [31:0] s_axil_wdata,
    input  wire    [3:0] s_axil_wstrb,
    output wire          s_axil_bvalid,
    input  wire          s_axil_bready,
    output wire    [1:0] s_axil_bresp,
    input  wire          s_axil_arvalid,
    output wire          s_axil_arready,
    input  wire   [31:0] s_axil_araddr,
    input  wire    [2:0] s_axil_arprot,
    output wire          s_axil_rvalid,
    input  wire          s_axil_rready,
    output wire    [1:0] s_axil_rresp,
    output wire   [31:0] s_axil_rdata,
    input  wire          i_probes
);


//------------------------------------------------------------------------------
// Signals
//------------------------------------------------------------------------------

wire          sys_clk;
wire          sys_rst;
wire          i_sample_clk_clk;
wire          i_rstn_rst;
wire          aw_valid;
wire          aw_ready;
wire   [31:0] aw_payload_addr;
wire    [2:0] aw_payload_prot;
wire          w_valid;
wire          w_ready;
wire   [31:0] w_payload_data;
wire    [3:0] w_payload_strb;
wire          b_valid;
wire          b_ready;
wire    [1:0] b_payload_resp;
wire          ar_valid;
wire          ar_ready;
wire   [31:0] ar_payload_addr;
wire    [2:0] ar_payload_prot;
wire          r_valid;
wire          r_ready;
wire    [1:0] r_payload_resp;
wire   [31:0] r_payload_data;
wire          probes_i;

//------------------------------------------------------------------------------
// Combinatorial Logic
//------------------------------------------------------------------------------

assign sys_clk = i_S_AXI_ACLK;
assign sys_rst = i_S_AXI_ARESETN;
assign i_sample_clk_clk = i_sample_clk;
assign i_rstn_rst = i_rstn;
assign aw_valid = s_axil_awvalid;
assign aw_payload_addr = s_axil_awaddr;
assign aw_payload_prot = s_axil_awprot;
assign s_axil_awready = aw_ready;
assign w_valid = s_axil_wvalid;
assign w_payload_data = s_axil_wdata;
assign w_payload_strb = s_axil_wstrb;
assign s_axil_wready = w_ready;
assign s_axil_bvalid = b_valid;
assign s_axil_bresp = b_payload_resp;
assign b_ready = s_axil_bready;
assign ar_valid = s_axil_arvalid;
assign ar_payload_addr = s_axil_araddr;
assign ar_payload_prot = s_axil_arprot;
assign s_axil_arready = ar_ready;
assign s_axil_rvalid = r_valid;
assign s_axil_rresp = r_payload_resp;
assign s_axil_rdata = r_payload_data;
assign r_ready = s_axil_rready;
assign probes_i = i_probes;


//------------------------------------------------------------------------------
// Synchronous Logic
//------------------------------------------------------------------------------


//------------------------------------------------------------------------------
// Specialized Logic
//------------------------------------------------------------------------------

ocla #(
	.AXI_ADDR_WIDTH(32),
	.AXI_DATA_WIDTH(32),
	.IP_ID(IP_ID),
	.IP_TYPE(IP_TYPE),
	.MEM_DEPTH(32),
	.NO_OF_PROBES(1),
	.NO_OF_TRIGGER_INPUTS(1),
	.PROBE_WIDHT(1)
) ocla (
	.S_AXI_ACLK(sys_clk),
	.S_AXI_ARADDR(ar_payload_addr),
	.S_AXI_ARESETN(sys_rst),
	.S_AXI_ARPROT(ar_payload_prot),
	.S_AXI_ARVALID(ar_valid),
	.S_AXI_AWADDR(aw_payload_addr),
	.S_AXI_AWPROT(aw_payload_prot),
	.S_AXI_AWVALID(aw_valid),
	.S_AXI_BREADY(b_ready),
	.S_AXI_RREADY(r_ready),
	.S_AXI_WDATA(w_payload_data),
	.S_AXI_WSTRB(w_payload_strb),
	.S_AXI_WVALID(w_valid),
	.probes(probes_i),
	.rstn(i_rstn_rst),
	.sample_clk(i_sample_clk_clk),
	.S_AXI_ARREADY(ar_ready),
	.S_AXI_AWREADY(aw_ready),
	.S_AXI_BRESP(b_payload_resp),
	.S_AXI_BVALID(b_valid),
	.S_AXI_RDATA(r_payload_data),
	.S_AXI_RRESP(r_payload_resp),
	.S_AXI_RVALID(r_valid),
	.S_AXI_WREADY(w_ready)
);

endmodule

// -----------------------------------------------------------------------------
//  Auto-Generated by LiteX on 2023-09-24 23:05:07.
//------------------------------------------------------------------------------
