
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.18+10 (git sha1 4e5aedd8e, gcc 11.2.1 -fPIC -Os)


-- Executing script file `ring_counter.ys' --

1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/share/raptor/sim_models/rapidsilicon/genesis3/RS_PRIMITIVES/blackbox_models/cell_sim_blackbox.v
Parsing SystemVerilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/share/raptor/sim_models/rapidsilicon/genesis3/RS_PRIMITIVES/blackbox_models/cell_sim_blackbox.v' to AST representation.
Generating RTLIL representation for module `\BOOT_CLOCK'.
Generating RTLIL representation for module `\CARRY_CHAIN'.
Generating RTLIL representation for module `\CLK_BUF'.
Generating RTLIL representation for module `\DFFNRE'.
Generating RTLIL representation for module `\DFFRE'.
Generating RTLIL representation for module `\DSP19X2'.
Generating RTLIL representation for module `\DSP38'.
Generating RTLIL representation for module `\FIFO18KX2'.
Generating RTLIL representation for module `\FIFO36K'.
Generating RTLIL representation for module `\I_BUF_DS'.
Generating RTLIL representation for module `\I_BUF'.
Generating RTLIL representation for module `\I_DDR'.
Generating RTLIL representation for module `\I_DELAY'.
Generating RTLIL representation for module `\I_SERDES'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\LUT5'.
Generating RTLIL representation for module `\LUT6'.
Generating RTLIL representation for module `\O_BUF_DS'.
Generating RTLIL representation for module `\O_BUFT_DS'.
Generating RTLIL representation for module `\O_BUFT'.
Generating RTLIL representation for module `\O_BUF'.
Generating RTLIL representation for module `\O_DDR'.
Generating RTLIL representation for module `\O_DELAY'.
Generating RTLIL representation for module `\O_SERDES_CLK'.
Generating RTLIL representation for module `\O_SERDES'.
Generating RTLIL representation for module `\PLL'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_AHB_M'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_AHB_S'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_AXI_M0'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_AXI_M1'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_DMA'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_IRQ'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_JTAG'.
Generating RTLIL representation for module `\SOC_FPGA_TEMPERATURE'.
Generating RTLIL representation for module `\TDP_RAM18KX2'.
Generating RTLIL representation for module `\TDP_RAM36K'.
Generating RTLIL representation for module `\LATCH'.
Generating RTLIL representation for module `\LATCHN'.
Generating RTLIL representation for module `\LATCHR'.
Generating RTLIL representation for module `\LATCHS'.
Generating RTLIL representation for module `\LATCHNR'.
Generating RTLIL representation for module `\LATCHNS'.
Generating RTLIL representation for module `\RS_DSP'.
Generating RTLIL representation for module `\RS_DSP_MULT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /nfs_project/gemini/DV/usmanqadir/jira_repo/Jira_Testcase/EDA-2299/rtl/ring_counter.v
Parsing Verilog input from `/nfs_project/gemini/DV/usmanqadir/jira_repo/Jira_Testcase/EDA-2299/rtl/ring_counter.v' to AST representation.
Generating RTLIL representation for module `\ring_counter'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \ring_counter

3.2. Analyzing design hierarchy..
Top module:  \ring_counter
Removed 0 unused modules.

4. Executing synth_rs pass: v0.4.205

4.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/CARRY.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/CARRY.v' to AST representation.
Generating RTLIL representation for module `\CARRY'.
Successfully finished Verilog frontend.

4.3. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v' to AST representation.
Replacing existing blackbox module `\LATCH' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v:20.1-34.10.
Generating RTLIL representation for module `\LATCH'.
Replacing existing blackbox module `\LATCHN' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v:48.1-62.10.
Generating RTLIL representation for module `\LATCHN'.
Replacing existing blackbox module `\LATCHR' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v:81.1-97.10.
Generating RTLIL representation for module `\LATCHR'.
Replacing existing blackbox module `\LATCHS' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v:115.1-131.10.
Generating RTLIL representation for module `\LATCHS'.
Replacing existing blackbox module `\LATCHNR' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v:150.1-166.10.
Generating RTLIL representation for module `\LATCHNR'.
Replacing existing blackbox module `\LATCHNS' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v:184.1-200.10.
Generating RTLIL representation for module `\LATCHNS'.
Generating RTLIL representation for module `\LATCHSRE'.
Generating RTLIL representation for module `\LATCHNSRE'.
Successfully finished Verilog frontend.

4.4. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/DFFRE.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/DFFRE.v' to AST representation.
Replacing existing blackbox module `\DFFRE' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/DFFRE.v:11.1-25.10.
Generating RTLIL representation for module `\DFFRE'.
Successfully finished Verilog frontend.

4.5. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/DFFNRE.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/DFFNRE.v' to AST representation.
Replacing existing blackbox module `\DFFNRE' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/DFFNRE.v:11.1-25.10.
Generating RTLIL representation for module `\DFFNRE'.
Successfully finished Verilog frontend.

4.6. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT1.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT1.v' to AST representation.
Replacing existing blackbox module `\LUT1' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT1.v:10.1-20.10.
Generating RTLIL representation for module `\LUT1'.
Successfully finished Verilog frontend.

4.7. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT2.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT2.v' to AST representation.
Replacing existing blackbox module `\LUT2' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT2.v:10.1-20.10.
Generating RTLIL representation for module `\LUT2'.
Successfully finished Verilog frontend.

4.8. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT3.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT3.v' to AST representation.
Replacing existing blackbox module `\LUT3' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT3.v:10.1-20.10.
Generating RTLIL representation for module `\LUT3'.
Successfully finished Verilog frontend.

4.9. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT4.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT4.v' to AST representation.
Replacing existing blackbox module `\LUT4' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT4.v:11.1-21.10.
Generating RTLIL representation for module `\LUT4'.
Successfully finished Verilog frontend.

4.10. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT5.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT5.v' to AST representation.
Replacing existing blackbox module `\LUT5' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT5.v:10.1-20.10.
Generating RTLIL representation for module `\LUT5'.
Successfully finished Verilog frontend.

4.11. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT6.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT6.v' to AST representation.
Replacing existing blackbox module `\LUT6' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/LUT6.v:10.1-20.10.
Generating RTLIL representation for module `\LUT6'.
Successfully finished Verilog frontend.

4.12. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/CLK_BUF.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/CLK_BUF.v' to AST representation.
Replacing existing blackbox module `\CLK_BUF' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/CLK_BUF.v:10.1-17.10.
Generating RTLIL representation for module `\CLK_BUF'.
Successfully finished Verilog frontend.

4.13. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/O_BUF.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/O_BUF.v' to AST representation.
Replacing existing blackbox module `\O_BUF' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/O_BUF.v:10.1-22.10.
Generating RTLIL representation for module `\O_BUF'.
Successfully finished Verilog frontend.

4.14. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/DSP38.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/DSP38.v' to AST representation.
Replacing existing blackbox module `\DSP38' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/DSP38.v:10.1-324.10.
Generating RTLIL representation for module `\DSP38'.
/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/sim_models/verilog/DSP38.v:0: Warning: System task `$display' outside initial block is unsupported.
Successfully finished Verilog frontend.

4.15. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_sim.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_sim.v' to AST representation.
Generating RTLIL representation for module `\TDP_BRAM18'.
Replacing existing blackbox module `\RS_TDP36K' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_sim.v:113.1-641.10.
Generating RTLIL representation for module `\RS_TDP36K'.
Replacing existing blackbox module `\BRAM2x18_TDP' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_sim.v:642.1-1070.10.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Replacing existing blackbox module `\BRAM2x18_SDP' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_sim.v:1072.1-1481.10.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Replacing existing blackbox module `\_$_mem_v2_asymmetric' at /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_sim.v:1483.1-1886.10.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

4.16. Executing HIERARCHY pass (managing design hierarchy).

4.16.1. Analyzing design hierarchy..
Top module:  \ring_counter

4.16.2. Analyzing design hierarchy..
Top module:  \ring_counter
Removed 0 unused modules.

4.17. Executing PROC pass (convert processes to netlists).

4.17.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.17.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 3 switch rules as full_case in process $proc$/nfs_project/gemini/DV/usmanqadir/jira_repo/Jira_Testcase/EDA-2299/rtl/ring_counter.v:19$4 in module ring_counter.
Removed a total of 0 dead cases.

4.17.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 1 redundant assignment.
Promoted 0 assignments to connections.

4.17.4. Executing PROC_INIT pass (extract init attributes).

4.17.5. Executing PROC_ARST pass (detect async resets in processes).

4.17.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.
<suppressed ~3 debug messages>

4.17.7. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\ring_counter.$proc$/nfs_project/gemini/DV/usmanqadir/jira_repo/Jira_Testcase/EDA-2299/rtl/ring_counter.v:19$4'.
     1/3: $0\out[15:0] [15]
     2/3: $0\out[15:0] [0]
     3/3: $0\out[15:0] [14:1]

4.17.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.17.9. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\ring_counter.\out' using process `\ring_counter.$proc$/nfs_project/gemini/DV/usmanqadir/jira_repo/Jira_Testcase/EDA-2299/rtl/ring_counter.v:19$4'.
  created $dff cell `$procdff$34' with positive edge clock.

4.17.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.17.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 3 empty switches in `\ring_counter.$proc$/nfs_project/gemini/DV/usmanqadir/jira_repo/Jira_Testcase/EDA-2299/rtl/ring_counter.v:19$4'.
Removing empty process `ring_counter.$proc$/nfs_project/gemini/DV/usmanqadir/jira_repo/Jira_Testcase/EDA-2299/rtl/ring_counter.v:19$4'.
Cleaned up 3 empty switches.

4.17.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.
<suppressed ~5 debug messages>

4.18. Executing DEMUXMAP pass.

4.19. Executing FLATTEN pass (flatten design).

4.20. Executing DEMUXMAP pass.

4.21. Executing TRIBUF pass.

4.22. Executing TRIBUF pass.

4.23. Executing DEMINOUT pass (demote inout ports to input or output).

4.24. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.25. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..
Removed 1 unused cells and 15 unused wires.
<suppressed ~2 debug messages>

4.26. Executing CHECK pass (checking for obvious problems).
Checking module ring_counter...
Found and reported 0 problems.

4.27. Printing statistics.

=== ring_counter ===

   Number of wires:                 16
   Number of wire bits:             87
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $dff                            1
     $eq                             1
     $mux                           10
     $not                            1

4.28. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.29. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.30. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$17.
    dead port 1/2 on $mux $procmux$26.
    dead port 1/2 on $mux $procmux$8.
Removed 3 multiplexer ports.
<suppressed ~4 debug messages>

4.31. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.32. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.33. Executing OPT_SHARE pass.

4.34. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=1, #solve=0, #remove=0, time=0.00 sec.]

4.35. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..
Removed 0 unused cells and 3 unused wires.
<suppressed ~1 debug messages>

4.36. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.37. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.38. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.39. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.40. Executing OPT_SHARE pass.

4.41. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=1, #solve=0, #remove=0, time=0.00 sec.]

4.42. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.43. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 2

4.44. Executing FSM pass (extract and optimize FSM).

4.44.1. Executing FSM_DETECT pass (finding FSMs in design).

4.44.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.44.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.44.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.44.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.44.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.44.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.44.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.45. Executing WREDUCE pass (reducing word size of cells).

4.46. Executing PEEPOPT pass (run peephole optimizers).

4.47. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.49. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.50. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.51. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.53. Executing OPT_SHARE pass.

4.54. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$34 ($dff) from module ring_counter (D = { $procmux$11_Y $procmux$29_Y $procmux$20_Y }, Q = \out, rval = 16'1000000000000000).
[#visit=1, #solve=0, #remove=0, time=0.00 sec.]

4.55. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..
Removed 3 unused cells and 1 unused wires.
<suppressed ~4 debug messages>

4.56. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.57. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.58. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.59. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.60. Executing OPT_SHARE pass.

4.61. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=1, #solve=0, #remove=0, time=0.00 sec.]

4.62. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.63. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 2

4.64. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.65. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.66. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.67. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.68. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.69. Executing OPT_SHARE pass.

4.70. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=1, #solve=0, #remove=0, time=0.00 sec.]

4.71. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.72. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.73. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.74. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.75. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.76. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.77. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.78. Executing OPT_SHARE pass.

4.79. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=1, #solve=0, #remove=0, time=0.00 sec.]

4.80. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=1, #solve=16, #remove=0, time=0.01 sec.]

4.81. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.82. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.83. Executing WREDUCE pass (reducing word size of cells).

4.84. Executing PEEPOPT pass (run peephole optimizers).

4.85. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.86. Executing DEMUXMAP pass.

4.87. Printing statistics.

=== ring_counter ===

   Number of wires:                 12
   Number of wire bits:             55
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $eq                             1
     $mux                            4
     $not                            1
     $sdff                           1

4.88. Executing RS_DSP_MULTADD pass.

4.89. Executing WREDUCE pass (reducing word size of cells).

4.90. Executing RS_DSP_MACC pass.

4.91. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.92. Executing TECHMAP pass (map to technology primitives).

4.92.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

4.92.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

4.93. Printing statistics.

=== ring_counter ===

   Number of wires:                 12
   Number of wire bits:             55
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $eq                             1
     $mux                            4
     $not                            1
     $sdff                           1

4.94. Executing TECHMAP pass (map to technology primitives).

4.94.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_map.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Successfully finished Verilog frontend.

4.94.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

4.95. Executing TECHMAP pass (map to technology primitives).

4.95.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_final_map.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Successfully finished Verilog frontend.

4.95.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

4.96. Executing rs_pack_dsp_regs pass.

4.97. Executing RS_DSP_IO_REGS pass.

4.98. Printing statistics.

=== ring_counter ===

   Number of wires:                 12
   Number of wire bits:             55
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $eq                             1
     $mux                            4
     $not                            1
     $sdff                           1

4.99. Executing TECHMAP pass (map to technology primitives).

4.99.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp38_map.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp38_map.v' to AST representation.
Generating RTLIL representation for module `\RS_DSP_MULTACC'.
Generating RTLIL representation for module `\RS_DSP_MULT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN_REGOUT'.
Successfully finished Verilog frontend.

4.99.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~14 debug messages>

4.100. Printing statistics.

=== ring_counter ===

   Number of wires:                 12
   Number of wire bits:             55
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $eq                             1
     $mux                            4
     $not                            1
     $sdff                           1

4.101. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module ring_counter:
  created 0 $alu and 0 $macc cells.

4.102. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.103. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.104. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~4 debug messages>

4.105. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.106. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.107. Executing OPT_SHARE pass.

4.108. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=1, #solve=0, #remove=0, time=0.00 sec.]

4.109. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.110. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.111. Printing statistics.

=== ring_counter ===

   Number of wires:                 12
   Number of wire bits:             55
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $eq                             1
     $mux                            4
     $not                            1
     $sdff                           1

4.112. Executing MEMORY pass.

4.112.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

4.112.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

4.112.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

4.112.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

4.112.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).

4.112.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.112.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.112.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

4.112.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.112.10. Executing MEMORY_COLLECT pass (generating $mem cells).

4.113. Printing statistics.

=== ring_counter ===

   Number of wires:                 12
   Number of wire bits:             55
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $eq                             1
     $mux                            4
     $not                            1
     $sdff                           1

4.114. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~4 debug messages>

4.115. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.116. Executing MEMORY_LIBMAP pass (mapping memories to cells).

4.117. Executing MEMORY_LIBMAP pass (mapping memories to cells).

4.118. Executing Rs_BRAM_Split pass.

4.119. Executing TECHMAP pass (map to technology primitives).

4.119.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_map_new.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_map_new.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_SDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

4.119.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

4.120. Executing TECHMAP pass (map to technology primitives).

4.120.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_final_map_new.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_final_map_new.v' to AST representation.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Successfully finished Verilog frontend.

4.120.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

4.121. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

4.122. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.123. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.124. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

4.125. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.126. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.127. Executing OPT_SHARE pass.

4.128. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=1, #solve=0, #remove=0, time=0.00 sec.]

4.129. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.130. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.131. Executing PMUXTREE pass.

4.132. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~5 debug messages>

4.133. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

4.134. Executing TECHMAP pass (map to technology primitives).

4.134.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.134.2. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/arith_map.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

4.134.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
No more expansions possible.
<suppressed ~79 debug messages>

4.135. Printing statistics.

=== ring_counter ===

   Number of wires:                 19
   Number of wire bits:            103
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 82
     $_DFF_P_                       16
     $_MUX_                         33
     $_NOT_                          2
     $_OR_                          15
     $_XOR_                         16

4.136. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.
<suppressed ~1 debug messages>

4.137. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.138. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.139. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.140. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.141. Executing OPT_SHARE pass.

4.142. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.143. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..
Removed 1 unused cells and 3 unused wires.
<suppressed ~2 debug messages>

4.144. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.145. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.146. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.147. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.148. Executing OPT_SHARE pass.

4.149. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.150. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.151. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 2

4.152. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.
<suppressed ~2 debug messages>

4.153. Executing TECHMAP pass (map to technology primitives).

4.153.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.153.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

4.154. Printing statistics.

=== ring_counter ===

   Number of wires:                 16
   Number of wire bits:            100
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 80
     $_AND_                          1
     $_DFF_P_                       16
     $_MUX_                         31
     $_OR_                          16
     $_XOR_                         16

4.155. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.156. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.157. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.158. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.159. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.160. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.161. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.162. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.163. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.164. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.165. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.166. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.167. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.168. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.169. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.170. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.171. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.172. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.173. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.174. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.175. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.176. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.177. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.178. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.179. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.180. Printing statistics.

=== ring_counter ===

   Number of wires:                 16
   Number of wire bits:            100
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 80
     $_AND_                          1
     $_DFF_P_                       16
     $_MUX_                         31
     $_OR_                          16
     $_XOR_                         16

   Number of Generic REGs:          16

ABC-DFF iteration : 1

4.181. Executing ABC pass (technology mapping using ABC).

4.181.1. Summary of detected clock domains:
  80 cells in clk=\clock0, en={ }, arst={ }, srst={ }

  #logic partitions = 1

4.181.2. Extracting gate netlist of module `\ring_counter' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0
Extracted 80 gates and 100 wires to a netlist network with 19 inputs and 17 outputs.

4.181.2.1. Executing ABC.

4.182. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.183. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.184. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.185. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.186. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.187. Executing OPT_SHARE pass.

4.188. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.189. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..
Removed 0 unused cells and 61 unused wires.
<suppressed ~1 debug messages>

4.190. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

ABC-DFF iteration : 2

4.191. Executing ABC pass (technology mapping using ABC).

4.191.1. Summary of detected clock domains:
  87 cells in clk=\clock0, en={ }, arst={ }, srst={ }

  #logic partitions = 1

4.191.2. Extracting gate netlist of module `\ring_counter' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0
Extracted 87 gates and 106 wires to a netlist network with 19 inputs and 17 outputs.

4.191.2.1. Executing ABC.

4.192. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.193. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.194. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.195. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.196. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.197. Executing OPT_SHARE pass.

4.198. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.199. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..
Removed 0 unused cells and 122 unused wires.
<suppressed ~1 debug messages>

4.200. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

ABC-DFF iteration : 3

4.201. Executing ABC pass (technology mapping using ABC).

4.201.1. Summary of detected clock domains:
  93 cells in clk=\clock0, en={ }, arst={ }, srst={ }

  #logic partitions = 1

4.201.2. Extracting gate netlist of module `\ring_counter' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0
Extracted 93 gates and 112 wires to a netlist network with 19 inputs and 17 outputs.

4.201.2.1. Executing ABC.

4.202. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.203. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.204. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.205. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.206. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.207. Executing OPT_SHARE pass.

4.208. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.209. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..
Removed 0 unused cells and 128 unused wires.
<suppressed ~1 debug messages>

4.210. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

ABC-DFF iteration : 4

4.211. Executing ABC pass (technology mapping using ABC).

4.211.1. Summary of detected clock domains:
  93 cells in clk=\clock0, en={ }, arst={ }, srst={ }

  #logic partitions = 1

4.211.2. Extracting gate netlist of module `\ring_counter' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \clock0
Extracted 93 gates and 112 wires to a netlist network with 19 inputs and 17 outputs.

4.211.2.1. Executing ABC.

4.212. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.213. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.214. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.215. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.216. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.217. Executing OPT_SHARE pass.

4.218. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.219. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..
Removed 0 unused cells and 128 unused wires.
<suppressed ~1 debug messages>

4.220. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.221. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

4.222. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.223. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.224. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.225. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.226. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.227. Executing OPT_SHARE pass.

4.228. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.229. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.230. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.231. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.232. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.233. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.234. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.235. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.236. Executing OPT_SHARE pass.

4.237. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.238. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.239. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.240. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.241. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.242. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.243. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.244. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.245. Executing OPT_SHARE pass.

4.246. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.247. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.248. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.249. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.250. Executing BMUXMAP pass.

4.251. Executing DEMUXMAP pass.

4.252. Executing ABC pass (technology mapping using ABC).

4.252.1. Extracting gate netlist of module `\ring_counter' to `<abc-temp-dir>/input.blif'..
Extracted 77 gates and 112 wires to a netlist network with 35 inputs and 17 outputs.

4.252.1.1. Executing ABC.
DE:   #PIs =  35  #Luts =    27  Max Lvl =   3  Avg Lvl =   1.12  [   0.08 sec. at Pass 0]{firstMap}[1]
DE:   #PIs =  35  #Luts =    26  Max Lvl =   3  Avg Lvl =   1.12  [   0.10 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs =  35  #Luts =    25  Max Lvl =   3  Avg Lvl =   1.12  [   0.12 sec. at Pass 2]{map}[6]
DE:   #PIs =  35  #Luts =    25  Max Lvl =   3  Avg Lvl =   1.12  [   0.13 sec. at Pass 3]{postMap}[12]
DE:   #PIs =  35  #Luts =    25  Max Lvl =   3  Avg Lvl =   1.12  [   0.30 sec. at Pass 4]{map}[36]
DE:   #PIs =  35  #Luts =    25  Max Lvl =   3  Avg Lvl =   1.12  [   0.36 sec. at Pass 5]{postMap}[72]
DE:   #PIs =  35  #Luts =    25  Max Lvl =   3  Avg Lvl =   1.12  [   0.00 sec. at Pass 6]{pushMap}[0]
DE:   #PIs =  35  #Luts =    25  Max Lvl =   3  Avg Lvl =   1.12  [   0.00 sec. at Pass 7]{finalMap}[0]

4.253. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.254. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.255. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.256. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.257. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.258. Executing OPT_SHARE pass.

4.259. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.260. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..
Removed 0 unused cells and 112 unused wires.
<suppressed ~1 debug messages>

4.261. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.262. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.

4.263. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.264. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.265. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.266. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.267. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.268. Executing OPT_SHARE pass.

4.269. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.270. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.271. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.272. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.273. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.274. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.275. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.276. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.277. Executing OPT_SHARE pass.

4.278. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.279. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.280. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.281. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.282. Printing statistics.

=== ring_counter ===

   Number of wires:                 31
   Number of wire bits:             61
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 41
     $_DFF_P_                       16
     $lut                           25

4.283. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

4.284. Executing RS_DFFSR_CONV pass.

4.285. Printing statistics.

=== ring_counter ===

   Number of wires:                 31
   Number of wire bits:             61
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 41
     $_DFF_P_                       16
     $lut                           25

4.286. Executing TECHMAP pass (map to technology primitives).

4.286.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.286.2. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/ffs_map.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_PP0_'.
Generating RTLIL representation for module `\$_DLATCH_PN0_'.
Generating RTLIL representation for module `\$_DLATCH_NP0_'.
Generating RTLIL representation for module `\$_DLATCH_NN0_'.
Generating RTLIL representation for module `\$_DLATCH_PP1_'.
Generating RTLIL representation for module `\$_DLATCH_PN1_'.
Generating RTLIL representation for module `\$_DLATCH_NP1_'.
Generating RTLIL representation for module `\$_DLATCH_NN1_'.
Successfully finished Verilog frontend.

4.286.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
No more expansions possible.
<suppressed ~161 debug messages>

4.287. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.
<suppressed ~454 debug messages>

4.288. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.289. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.290. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
<suppressed ~126 debug messages>
Removed a total of 42 cells.

4.291. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=0, #solve=0, #remove=0, time=0.00 sec.]

4.292. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..
Removed 0 unused cells and 109 unused wires.
<suppressed ~1 debug messages>

4.293. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.
<suppressed ~2 debug messages>

4.294. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.295. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.296. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.297. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.298. Executing OPT_SHARE pass.

4.299. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=0, #solve=0, #remove=0, time=0.00 sec.]

4.300. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.301. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.302. Executing TECHMAP pass (map to technology primitives).

4.302.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.302.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

4.303. Executing ABC pass (technology mapping using ABC).

4.303.1. Extracting gate netlist of module `\ring_counter' to `<abc-temp-dir>/input.blif'..
Extracted 85 gates and 122 wires to a netlist network with 35 inputs and 17 outputs.

4.303.1.1. Executing ABC.
DE:   #PIs =  35  #Luts =    26  Max Lvl =   3  Avg Lvl =   1.12  [   0.08 sec. at Pass 0]{firstMap}[1]
DE:   #PIs =  35  #Luts =    26  Max Lvl =   3  Avg Lvl =   1.12  [   0.10 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs =  35  #Luts =    25  Max Lvl =   3  Avg Lvl =   1.12  [   0.10 sec. at Pass 2]{map}[6]
DE:   #PIs =  35  #Luts =    25  Max Lvl =   3  Avg Lvl =   1.12  [   0.14 sec. at Pass 3]{postMap}[12]
DE:   #PIs =  35  #Luts =    25  Max Lvl =   3  Avg Lvl =   1.12  [   0.19 sec. at Pass 4]{map}[36]
DE:   #PIs =  35  #Luts =    25  Max Lvl =   3  Avg Lvl =   1.12  [   0.32 sec. at Pass 5]{postMap}[72]
DE:   #PIs =  35  #Luts =    25  Max Lvl =   3  Avg Lvl =   1.12  [   0.00 sec. at Pass 6]{pushMap}[0]
DE:   #PIs =  35  #Luts =    25  Max Lvl =   3  Avg Lvl =   1.12  [   0.00 sec. at Pass 7]{finalMap}[0]

4.304. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

4.305. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.306. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \ring_counter..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.307. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \ring_counter.
Performed a total of 0 changes.

4.308. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\ring_counter'.
Removed a total of 0 cells.

4.309. Executing OPT_SHARE pass.

4.310. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=0, #solve=0, #remove=0, time=0.00 sec.]

4.311. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..
Removed 0 unused cells and 108 unused wires.
<suppressed ~1 debug messages>

4.312. Executing OPT_EXPR pass (perform const folding).
Optimizing module ring_counter.

RUN-OPT ITERATIONS DONE : 1

4.313. Executing HIERARCHY pass (managing design hierarchy).

4.313.1. Analyzing design hierarchy..
Top module:  \ring_counter

4.313.2. Analyzing design hierarchy..
Top module:  \ring_counter
Removed 0 unused modules.

4.314. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \ring_counter..

4.315. Printing statistics.

=== ring_counter ===

   Number of wires:                 31
   Number of wire bits:             61
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 41
     $lut                           25
     DFFRE                          16

4.316. Executing TECHMAP pass (map to technology primitives).

4.316.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/lut_map.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/11_30_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.316.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~106 debug messages>

4.317. Printing statistics.

=== ring_counter ===

   Number of wires:                 81
   Number of wire bits:            191
   Number of public wires:           7
   Number of public wire bits:      37
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 41
     DFFRE                          16
     LUT4                           20
     LUT5                            5

   Number of LUTs:                  25
   Number of REGs:                  16
   Number of CARRY ADDERs:           0

5. Executing Verilog backend.
Dumping module `\ring_counter'.

6. Executing BLIF backend.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: 6a3b43176d, CPU: user 0.66s system 0.07s, MEM: 28.11 MB peak
Yosys 0.18+10 (git sha1 4e5aedd8e, gcc 11.2.1 -fPIC -Os)
Time spent: 98% 6x abc (41 sec), 0% 33x read_verilog (0 sec), ...
