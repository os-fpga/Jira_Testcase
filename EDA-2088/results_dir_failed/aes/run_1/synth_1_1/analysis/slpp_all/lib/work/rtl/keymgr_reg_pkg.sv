// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package keymgr_reg_pkg;

  // Param list
  parameter int NumSaltReg = 8;
  parameter int NumSwBindingReg = 8;
  parameter int NumOutReg = 8;
  parameter int NumKeyVersion = 1;
  parameter int NumAlerts = 2;

  // Address widths within the block
  parameter int BlockAw = 8;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic        q;
  } keymgr_reg2hw_intr_state_reg_t;

  typedef struct packed {
    logic        q;
  } keymgr_reg2hw_intr_enable_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } keymgr_reg2hw_intr_test_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
      logic        qe;
    } fatal_fault_err;
    struct packed {
      logic        q;
      logic        qe;
    } recov_operation_err;
  } keymgr_reg2hw_alert_test_reg_t;

  typedef struct packed {
    logic        q;
  } keymgr_reg2hw_start_reg_t;

  typedef struct packed {
    struct packed {
      logic [2:0]  q;
      logic        err_update;
      logic        err_storage;
    } operation;
    struct packed {
      logic        q;
      logic        err_update;
      logic        err_storage;
    } cdi_sel;
    struct packed {
      logic [2:0]  q;
      logic        err_update;
      logic        err_storage;
    } dest_sel;
  } keymgr_reg2hw_control_shadowed_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } keymgr_reg2hw_sideload_clear_reg_t;

  typedef struct packed {
    logic [15:0] q;
    logic        err_update;
    logic        err_storage;
  } keymgr_reg2hw_reseed_interval_shadowed_reg_t;

  typedef struct packed {
    logic        q;
    logic        qe;
  } keymgr_reg2hw_sw_binding_regwen_reg_t;

  typedef struct packed {
    logic [31:0] q;
  } keymgr_reg2hw_sealing_sw_binding_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } keymgr_reg2hw_attest_sw_binding_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } keymgr_reg2hw_salt_mreg_t;

  typedef struct packed {
    logic [31:0] q;
  } keymgr_reg2hw_key_version_mreg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        err_update;
    logic        err_storage;
  } keymgr_reg2hw_max_creator_key_ver_shadowed_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        err_update;
    logic        err_storage;
  } keymgr_reg2hw_max_owner_int_key_ver_shadowed_reg_t;

  typedef struct packed {
    logic [31:0] q;
    logic        err_update;
    logic        err_storage;
  } keymgr_reg2hw_max_owner_key_ver_shadowed_reg_t;

  typedef struct packed {
    struct packed {
      logic        q;
    } cmd;
    struct packed {
      logic        q;
    } kmac_fsm;
    struct packed {
      logic        q;
    } kmac_op;
    struct packed {
      logic        q;
    } kmac_out;
    struct packed {
      logic        q;
    } regfile_intg;
    struct packed {
      logic        q;
    } shadow;
    struct packed {
      logic        q;
    } ctrl_fsm_intg;
    struct packed {
      logic        q;
    } ctrl_fsm_cnt;
    struct packed {
      logic        q;
    } reseed_cnt;
    struct packed {
      logic        q;
    } side_ctrl_fsm;
  } keymgr_reg2hw_fault_status_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } keymgr_hw2reg_intr_state_reg_t;

  typedef struct packed {
    logic        d;
  } keymgr_hw2reg_cfg_regwen_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } keymgr_hw2reg_start_reg_t;

  typedef struct packed {
    logic        d;
  } keymgr_hw2reg_sw_binding_regwen_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } keymgr_hw2reg_sw_share0_output_mreg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } keymgr_hw2reg_sw_share1_output_mreg_t;

  typedef struct packed {
    logic [2:0]  d;
    logic        de;
  } keymgr_hw2reg_working_state_reg_t;

  typedef struct packed {
    logic [1:0]  d;
    logic        de;
  } keymgr_hw2reg_op_status_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } invalid_op;
    struct packed {
      logic        d;
      logic        de;
    } invalid_kmac_input;
    struct packed {
      logic        d;
      logic        de;
    } invalid_shadow_update;
  } keymgr_hw2reg_err_code_reg_t;

  typedef struct packed {
    struct packed {
      logic        d;
      logic        de;
    } cmd;
    struct packed {
      logic        d;
      logic        de;
    } kmac_fsm;
    struct packed {
      logic        d;
      logic        de;
    } kmac_op;
    struct packed {
      logic        d;
      logic        de;
    } kmac_out;
    struct packed {
      logic        d;
      logic        de;
    } regfile_intg;
    struct packed {
      logic        d;
      logic        de;
    } shadow;
    struct packed {
      logic        d;
      logic        de;
    } ctrl_fsm_intg;
    struct packed {
      logic        d;
      logic        de;
    } ctrl_fsm_cnt;
    struct packed {
      logic        d;
      logic        de;
    } reseed_cnt;
    struct packed {
      logic        d;
      logic        de;
    } side_ctrl_fsm;
  } keymgr_hw2reg_fault_status_reg_t;

  // Register -> HW type
  typedef struct packed {
    keymgr_reg2hw_intr_state_reg_t intr_state; // [942:942]
    keymgr_reg2hw_intr_enable_reg_t intr_enable; // [941:941]
    keymgr_reg2hw_intr_test_reg_t intr_test; // [940:939]
    keymgr_reg2hw_alert_test_reg_t alert_test; // [938:935]
    keymgr_reg2hw_start_reg_t start; // [934:934]
    keymgr_reg2hw_control_shadowed_reg_t control_shadowed; // [933:927]
    keymgr_reg2hw_sideload_clear_reg_t sideload_clear; // [926:924]
    keymgr_reg2hw_reseed_interval_shadowed_reg_t reseed_interval_shadowed; // [923:908]
    keymgr_reg2hw_sw_binding_regwen_reg_t sw_binding_regwen; // [907:906]
    keymgr_reg2hw_sealing_sw_binding_mreg_t [7:0] sealing_sw_binding; // [905:650]
    keymgr_reg2hw_attest_sw_binding_mreg_t [7:0] attest_sw_binding; // [649:394]
    keymgr_reg2hw_salt_mreg_t [7:0] salt; // [393:138]
    keymgr_reg2hw_key_version_mreg_t [0:0] key_version; // [137:106]
    keymgr_reg2hw_max_creator_key_ver_shadowed_reg_t max_creator_key_ver_shadowed; // [105:74]
    keymgr_reg2hw_max_owner_int_key_ver_shadowed_reg_t max_owner_int_key_ver_shadowed; // [73:42]
    keymgr_reg2hw_max_owner_key_ver_shadowed_reg_t max_owner_key_ver_shadowed; // [41:10]
    keymgr_reg2hw_fault_status_reg_t fault_status; // [9:0]
  } keymgr_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    keymgr_hw2reg_intr_state_reg_t intr_state; // [566:565]
    keymgr_hw2reg_cfg_regwen_reg_t cfg_regwen; // [564:564]
    keymgr_hw2reg_start_reg_t start; // [563:562]
    keymgr_hw2reg_sw_binding_regwen_reg_t sw_binding_regwen; // [561:561]
    keymgr_hw2reg_sw_share0_output_mreg_t [7:0] sw_share0_output; // [560:297]
    keymgr_hw2reg_sw_share1_output_mreg_t [7:0] sw_share1_output; // [296:33]
    keymgr_hw2reg_working_state_reg_t working_state; // [32:29]
    keymgr_hw2reg_op_status_reg_t op_status; // [28:26]
    keymgr_hw2reg_err_code_reg_t err_code; // [25:20]
    keymgr_hw2reg_fault_status_reg_t fault_status; // [19:0]
  } keymgr_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] KEYMGR_INTR_STATE_OFFSET = 8'h0;
  parameter logic [BlockAw-1:0] KEYMGR_INTR_ENABLE_OFFSET = 8'h4;
  parameter logic [BlockAw-1:0] KEYMGR_INTR_TEST_OFFSET = 8'h8;
  parameter logic [BlockAw-1:0] KEYMGR_ALERT_TEST_OFFSET = 8'hc;
  parameter logic [BlockAw-1:0] KEYMGR_CFG_REGWEN_OFFSET = 8'h10;
  parameter logic [BlockAw-1:0] KEYMGR_START_OFFSET = 8'h14;
  parameter logic [BlockAw-1:0] KEYMGR_CONTROL_SHADOWED_OFFSET = 8'h18;
  parameter logic [BlockAw-1:0] KEYMGR_SIDELOAD_CLEAR_OFFSET = 8'h1c;
  parameter logic [BlockAw-1:0] KEYMGR_RESEED_INTERVAL_REGWEN_OFFSET = 8'h20;
  parameter logic [BlockAw-1:0] KEYMGR_RESEED_INTERVAL_SHADOWED_OFFSET = 8'h24;
  parameter logic [BlockAw-1:0] KEYMGR_SW_BINDING_REGWEN_OFFSET = 8'h28;
  parameter logic [BlockAw-1:0] KEYMGR_SEALING_SW_BINDING_0_OFFSET = 8'h2c;
  parameter logic [BlockAw-1:0] KEYMGR_SEALING_SW_BINDING_1_OFFSET = 8'h30;
  parameter logic [BlockAw-1:0] KEYMGR_SEALING_SW_BINDING_2_OFFSET = 8'h34;
  parameter logic [BlockAw-1:0] KEYMGR_SEALING_SW_BINDING_3_OFFSET = 8'h38;
  parameter logic [BlockAw-1:0] KEYMGR_SEALING_SW_BINDING_4_OFFSET = 8'h3c;
  parameter logic [BlockAw-1:0] KEYMGR_SEALING_SW_BINDING_5_OFFSET = 8'h40;
  parameter logic [BlockAw-1:0] KEYMGR_SEALING_SW_BINDING_6_OFFSET = 8'h44;
  parameter logic [BlockAw-1:0] KEYMGR_SEALING_SW_BINDING_7_OFFSET = 8'h48;
  parameter logic [BlockAw-1:0] KEYMGR_ATTEST_SW_BINDING_0_OFFSET = 8'h4c;
  parameter logic [BlockAw-1:0] KEYMGR_ATTEST_SW_BINDING_1_OFFSET = 8'h50;
  parameter logic [BlockAw-1:0] KEYMGR_ATTEST_SW_BINDING_2_OFFSET = 8'h54;
  parameter logic [BlockAw-1:0] KEYMGR_ATTEST_SW_BINDING_3_OFFSET = 8'h58;
  parameter logic [BlockAw-1:0] KEYMGR_ATTEST_SW_BINDING_4_OFFSET = 8'h5c;
  parameter logic [BlockAw-1:0] KEYMGR_ATTEST_SW_BINDING_5_OFFSET = 8'h60;
  parameter logic [BlockAw-1:0] KEYMGR_ATTEST_SW_BINDING_6_OFFSET = 8'h64;
  parameter logic [BlockAw-1:0] KEYMGR_ATTEST_SW_BINDING_7_OFFSET = 8'h68;
  parameter logic [BlockAw-1:0] KEYMGR_SALT_0_OFFSET = 8'h6c;
  parameter logic [BlockAw-1:0] KEYMGR_SALT_1_OFFSET = 8'h70;
  parameter logic [BlockAw-1:0] KEYMGR_SALT_2_OFFSET = 8'h74;
  parameter logic [BlockAw-1:0] KEYMGR_SALT_3_OFFSET = 8'h78;
  parameter logic [BlockAw-1:0] KEYMGR_SALT_4_OFFSET = 8'h7c;
  parameter logic [BlockAw-1:0] KEYMGR_SALT_5_OFFSET = 8'h80;
  parameter logic [BlockAw-1:0] KEYMGR_SALT_6_OFFSET = 8'h84;
  parameter logic [BlockAw-1:0] KEYMGR_SALT_7_OFFSET = 8'h88;
  parameter logic [BlockAw-1:0] KEYMGR_KEY_VERSION_OFFSET = 8'h8c;
  parameter logic [BlockAw-1:0] KEYMGR_MAX_CREATOR_KEY_VER_REGWEN_OFFSET = 8'h90;
  parameter logic [BlockAw-1:0] KEYMGR_MAX_CREATOR_KEY_VER_SHADOWED_OFFSET = 8'h94;
  parameter logic [BlockAw-1:0] KEYMGR_MAX_OWNER_INT_KEY_VER_REGWEN_OFFSET = 8'h98;
  parameter logic [BlockAw-1:0] KEYMGR_MAX_OWNER_INT_KEY_VER_SHADOWED_OFFSET = 8'h9c;
  parameter logic [BlockAw-1:0] KEYMGR_MAX_OWNER_KEY_VER_REGWEN_OFFSET = 8'ha0;
  parameter logic [BlockAw-1:0] KEYMGR_MAX_OWNER_KEY_VER_SHADOWED_OFFSET = 8'ha4;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE0_OUTPUT_0_OFFSET = 8'ha8;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE0_OUTPUT_1_OFFSET = 8'hac;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE0_OUTPUT_2_OFFSET = 8'hb0;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE0_OUTPUT_3_OFFSET = 8'hb4;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE0_OUTPUT_4_OFFSET = 8'hb8;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE0_OUTPUT_5_OFFSET = 8'hbc;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE0_OUTPUT_6_OFFSET = 8'hc0;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE0_OUTPUT_7_OFFSET = 8'hc4;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE1_OUTPUT_0_OFFSET = 8'hc8;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE1_OUTPUT_1_OFFSET = 8'hcc;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE1_OUTPUT_2_OFFSET = 8'hd0;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE1_OUTPUT_3_OFFSET = 8'hd4;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE1_OUTPUT_4_OFFSET = 8'hd8;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE1_OUTPUT_5_OFFSET = 8'hdc;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE1_OUTPUT_6_OFFSET = 8'he0;
  parameter logic [BlockAw-1:0] KEYMGR_SW_SHARE1_OUTPUT_7_OFFSET = 8'he4;
  parameter logic [BlockAw-1:0] KEYMGR_WORKING_STATE_OFFSET = 8'he8;
  parameter logic [BlockAw-1:0] KEYMGR_OP_STATUS_OFFSET = 8'hec;
  parameter logic [BlockAw-1:0] KEYMGR_ERR_CODE_OFFSET = 8'hf0;
  parameter logic [BlockAw-1:0] KEYMGR_FAULT_STATUS_OFFSET = 8'hf4;

  // Reset values for hwext registers and their fields
  parameter logic [0:0] KEYMGR_INTR_TEST_RESVAL = 1'h0;
  parameter logic [0:0] KEYMGR_INTR_TEST_OP_DONE_RESVAL = 1'h0;
  parameter logic [1:0] KEYMGR_ALERT_TEST_RESVAL = 2'h0;
  parameter logic [0:0] KEYMGR_ALERT_TEST_FATAL_FAULT_ERR_RESVAL = 1'h0;
  parameter logic [0:0] KEYMGR_ALERT_TEST_RECOV_OPERATION_ERR_RESVAL = 1'h0;
  parameter logic [0:0] KEYMGR_CFG_REGWEN_RESVAL = 1'h1;
  parameter logic [0:0] KEYMGR_CFG_REGWEN_EN_RESVAL = 1'h1;
  parameter logic [0:0] KEYMGR_SW_BINDING_REGWEN_RESVAL = 1'h1;
  parameter logic [0:0] KEYMGR_SW_BINDING_REGWEN_EN_RESVAL = 1'h1;

  // Register index
  typedef enum int {
    KEYMGR_INTR_STATE,
    KEYMGR_INTR_ENABLE,
    KEYMGR_INTR_TEST,
    KEYMGR_ALERT_TEST,
    KEYMGR_CFG_REGWEN,
    KEYMGR_START,
    KEYMGR_CONTROL_SHADOWED,
    KEYMGR_SIDELOAD_CLEAR,
    KEYMGR_RESEED_INTERVAL_REGWEN,
    KEYMGR_RESEED_INTERVAL_SHADOWED,
    KEYMGR_SW_BINDING_REGWEN,
    KEYMGR_SEALING_SW_BINDING_0,
    KEYMGR_SEALING_SW_BINDING_1,
    KEYMGR_SEALING_SW_BINDING_2,
    KEYMGR_SEALING_SW_BINDING_3,
    KEYMGR_SEALING_SW_BINDING_4,
    KEYMGR_SEALING_SW_BINDING_5,
    KEYMGR_SEALING_SW_BINDING_6,
    KEYMGR_SEALING_SW_BINDING_7,
    KEYMGR_ATTEST_SW_BINDING_0,
    KEYMGR_ATTEST_SW_BINDING_1,
    KEYMGR_ATTEST_SW_BINDING_2,
    KEYMGR_ATTEST_SW_BINDING_3,
    KEYMGR_ATTEST_SW_BINDING_4,
    KEYMGR_ATTEST_SW_BINDING_5,
    KEYMGR_ATTEST_SW_BINDING_6,
    KEYMGR_ATTEST_SW_BINDING_7,
    KEYMGR_SALT_0,
    KEYMGR_SALT_1,
    KEYMGR_SALT_2,
    KEYMGR_SALT_3,
    KEYMGR_SALT_4,
    KEYMGR_SALT_5,
    KEYMGR_SALT_6,
    KEYMGR_SALT_7,
    KEYMGR_KEY_VERSION,
    KEYMGR_MAX_CREATOR_KEY_VER_REGWEN,
    KEYMGR_MAX_CREATOR_KEY_VER_SHADOWED,
    KEYMGR_MAX_OWNER_INT_KEY_VER_REGWEN,
    KEYMGR_MAX_OWNER_INT_KEY_VER_SHADOWED,
    KEYMGR_MAX_OWNER_KEY_VER_REGWEN,
    KEYMGR_MAX_OWNER_KEY_VER_SHADOWED,
    KEYMGR_SW_SHARE0_OUTPUT_0,
    KEYMGR_SW_SHARE0_OUTPUT_1,
    KEYMGR_SW_SHARE0_OUTPUT_2,
    KEYMGR_SW_SHARE0_OUTPUT_3,
    KEYMGR_SW_SHARE0_OUTPUT_4,
    KEYMGR_SW_SHARE0_OUTPUT_5,
    KEYMGR_SW_SHARE0_OUTPUT_6,
    KEYMGR_SW_SHARE0_OUTPUT_7,
    KEYMGR_SW_SHARE1_OUTPUT_0,
    KEYMGR_SW_SHARE1_OUTPUT_1,
    KEYMGR_SW_SHARE1_OUTPUT_2,
    KEYMGR_SW_SHARE1_OUTPUT_3,
    KEYMGR_SW_SHARE1_OUTPUT_4,
    KEYMGR_SW_SHARE1_OUTPUT_5,
    KEYMGR_SW_SHARE1_OUTPUT_6,
    KEYMGR_SW_SHARE1_OUTPUT_7,
    KEYMGR_WORKING_STATE,
    KEYMGR_OP_STATUS,
    KEYMGR_ERR_CODE,
    KEYMGR_FAULT_STATUS
  } keymgr_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] KEYMGR_PERMIT [62] = '{
    4'b0001, // index[ 0] KEYMGR_INTR_STATE
    4'b0001, // index[ 1] KEYMGR_INTR_ENABLE
    4'b0001, // index[ 2] KEYMGR_INTR_TEST
    4'b0001, // index[ 3] KEYMGR_ALERT_TEST
    4'b0001, // index[ 4] KEYMGR_CFG_REGWEN
    4'b0001, // index[ 5] KEYMGR_START
    4'b0011, // index[ 6] KEYMGR_CONTROL_SHADOWED
    4'b0001, // index[ 7] KEYMGR_SIDELOAD_CLEAR
    4'b0001, // index[ 8] KEYMGR_RESEED_INTERVAL_REGWEN
    4'b0011, // index[ 9] KEYMGR_RESEED_INTERVAL_SHADOWED
    4'b0001, // index[10] KEYMGR_SW_BINDING_REGWEN
    4'b1111, // index[11] KEYMGR_SEALING_SW_BINDING_0
    4'b1111, // index[12] KEYMGR_SEALING_SW_BINDING_1
    4'b1111, // index[13] KEYMGR_SEALING_SW_BINDING_2
    4'b1111, // index[14] KEYMGR_SEALING_SW_BINDING_3
    4'b1111, // index[15] KEYMGR_SEALING_SW_BINDING_4
    4'b1111, // index[16] KEYMGR_SEALING_SW_BINDING_5
    4'b1111, // index[17] KEYMGR_SEALING_SW_BINDING_6
    4'b1111, // index[18] KEYMGR_SEALING_SW_BINDING_7
    4'b1111, // index[19] KEYMGR_ATTEST_SW_BINDING_0
    4'b1111, // index[20] KEYMGR_ATTEST_SW_BINDING_1
    4'b1111, // index[21] KEYMGR_ATTEST_SW_BINDING_2
    4'b1111, // index[22] KEYMGR_ATTEST_SW_BINDING_3
    4'b1111, // index[23] KEYMGR_ATTEST_SW_BINDING_4
    4'b1111, // index[24] KEYMGR_ATTEST_SW_BINDING_5
    4'b1111, // index[25] KEYMGR_ATTEST_SW_BINDING_6
    4'b1111, // index[26] KEYMGR_ATTEST_SW_BINDING_7
    4'b1111, // index[27] KEYMGR_SALT_0
    4'b1111, // index[28] KEYMGR_SALT_1
    4'b1111, // index[29] KEYMGR_SALT_2
    4'b1111, // index[30] KEYMGR_SALT_3
    4'b1111, // index[31] KEYMGR_SALT_4
    4'b1111, // index[32] KEYMGR_SALT_5
    4'b1111, // index[33] KEYMGR_SALT_6
    4'b1111, // index[34] KEYMGR_SALT_7
    4'b1111, // index[35] KEYMGR_KEY_VERSION
    4'b0001, // index[36] KEYMGR_MAX_CREATOR_KEY_VER_REGWEN
    4'b1111, // index[37] KEYMGR_MAX_CREATOR_KEY_VER_SHADOWED
    4'b0001, // index[38] KEYMGR_MAX_OWNER_INT_KEY_VER_REGWEN
    4'b1111, // index[39] KEYMGR_MAX_OWNER_INT_KEY_VER_SHADOWED
    4'b0001, // index[40] KEYMGR_MAX_OWNER_KEY_VER_REGWEN
    4'b1111, // index[41] KEYMGR_MAX_OWNER_KEY_VER_SHADOWED
    4'b1111, // index[42] KEYMGR_SW_SHARE0_OUTPUT_0
    4'b1111, // index[43] KEYMGR_SW_SHARE0_OUTPUT_1
    4'b1111, // index[44] KEYMGR_SW_SHARE0_OUTPUT_2
    4'b1111, // index[45] KEYMGR_SW_SHARE0_OUTPUT_3
    4'b1111, // index[46] KEYMGR_SW_SHARE0_OUTPUT_4
    4'b1111, // index[47] KEYMGR_SW_SHARE0_OUTPUT_5
    4'b1111, // index[48] KEYMGR_SW_SHARE0_OUTPUT_6
    4'b1111, // index[49] KEYMGR_SW_SHARE0_OUTPUT_7
    4'b1111, // index[50] KEYMGR_SW_SHARE1_OUTPUT_0
    4'b1111, // index[51] KEYMGR_SW_SHARE1_OUTPUT_1
    4'b1111, // index[52] KEYMGR_SW_SHARE1_OUTPUT_2
    4'b1111, // index[53] KEYMGR_SW_SHARE1_OUTPUT_3
    4'b1111, // index[54] KEYMGR_SW_SHARE1_OUTPUT_4
    4'b1111, // index[55] KEYMGR_SW_SHARE1_OUTPUT_5
    4'b1111, // index[56] KEYMGR_SW_SHARE1_OUTPUT_6
    4'b1111, // index[57] KEYMGR_SW_SHARE1_OUTPUT_7
    4'b0001, // index[58] KEYMGR_WORKING_STATE
    4'b0001, // index[59] KEYMGR_OP_STATUS
    4'b0001, // index[60] KEYMGR_ERR_CODE
    4'b0011 // index[61] KEYMGR_FAULT_STATUS
  };

endpackage

