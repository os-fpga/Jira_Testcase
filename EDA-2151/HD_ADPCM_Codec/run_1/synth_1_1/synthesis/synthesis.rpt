/*******************************************************************************
Copyright (c) 2022 Rapid Silicon
This source code contains proprietary information belonging to Rapid Silicon
(the "licensor") released under license and non-disclosure agreement to the
recipient (the "licensee").

The information shared and protected by the license and non-disclosure agreement
includes but is not limited to the following:
* operational algorithms of the product
* logos, graphics, source code, and visual presentation of the product
* confidential operational information of the licensor

The recipient of this source code is NOT permitted to publicly disclose,
re-use, archive beyond the period of the license agreement, transfer to a
sub-licensee, or re-implement any portion of the content covered by the license
and non-disclosure agreement without the prior written consent of the licensor.

Portions of Raptor Design Suite are utilized under the following third-party copyright notices:

Parallax Static Timing Analyzer Copyright (c) 2021, Parallax Software, Inc. All rights reserved.
*********************************************************************************/

Version  : 2023.10
Build    : 0.8.42
Hash     : 96ad056
Date     : Oct 17 2023
Type     : Engineering
Log Time   : Tue Oct 17 05:53:51 2023 GMT

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.18+10 (git sha1 b3f40b448, gcc 11.2.1 -fPIC -Os)


-- Executing script file `HD_ADPCM_Codec.ys' --

1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/share/raptor/sim_models/rapidsilicon/genesis3/cell_sim_blackbox.v
Parsing SystemVerilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/share/raptor/sim_models/rapidsilicon/genesis3/cell_sim_blackbox.v' to AST representation.
Generating RTLIL representation for module `\CLK_BUF'.
Generating RTLIL representation for module `\IO_BUF'.
Generating RTLIL representation for module `\IO_BUF_DS'.
Generating RTLIL representation for module `\I_BUF'.
Generating RTLIL representation for module `\I_BUF_DS'.
Generating RTLIL representation for module `\I_DDR'.
Generating RTLIL representation for module `\O_BUF'.
Generating RTLIL representation for module `\O_BUFT_DS'.
Generating RTLIL representation for module `\O_BUFT'.
Generating RTLIL representation for module `\O_DDR'.
Generating RTLIL representation for module `\O_SERDES'.
Generating RTLIL representation for module `\I_SERDES'.
Generating RTLIL representation for module `\DFFRE'.
Generating RTLIL representation for module `\DFFNRE'.
Generating RTLIL representation for module `\latch'.
Generating RTLIL representation for module `\latchn'.
Generating RTLIL representation for module `\latchr'.
Generating RTLIL representation for module `\latchnr'.
Generating RTLIL representation for module `\RS_DSP'.
Generating RTLIL representation for module `\RS_DSP_MULT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGOUT'.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\RS_TDP36K'.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Generating RTLIL representation for module `\$lut'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_AHB_S'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_AXI_M0'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_AXI_M1'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_AXI_M0_M1'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_DMA'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_GPIO'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_IRQ'.
Generating RTLIL representation for module `\SOC_FPGA_INTF_JTAG'.
Generating RTLIL representation for module `\soc_fpga_intf'.
Generating RTLIL representation for module `\FIFO18K'.
Generating RTLIL representation for module `\FIFO36K'.
Generating RTLIL representation for module `\LUT1'.
Generating RTLIL representation for module `\LUT2'.
Generating RTLIL representation for module `\LUT3'.
Generating RTLIL representation for module `\LUT4'.
Generating RTLIL representation for module `\LUT5'.
Generating RTLIL representation for module `\LUT6'.
Generating RTLIL representation for module `\CARRY_CHAIN'.
Generating RTLIL representation for module `\DSP38'.
Generating RTLIL representation for module `\LATCH'.
Generating RTLIL representation for module `\LATCHN'.
Generating RTLIL representation for module `\LATCHR'.
Generating RTLIL representation for module `\LATCHS'.
Generating RTLIL representation for module `\LATCHNR'.
Generating RTLIL representation for module `\LATCHNS'.
Successfully finished Verilog frontend.

2. Executing GHDL.
Importing module HD_ADPCM_Codec.
Importing module SevenSegments_Driver.
Importing module LEDs_Bar_Driver.
Importing module I2C_Driver.
Importing module I2S_Driver.
Importing module Flash_Memory_Driver.
Importing module ADPCM_Decoder_1_Bit.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Analyzing design hierarchy..
Top module:  \HD_ADPCM_Codec

3.2. Analyzing design hierarchy..
Top module:  \HD_ADPCM_Codec
Removed 0 unused modules.

4. Executing synth_rs pass: v0.4.196

4.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/common/cells_sim.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/common/cells_sim.v' to AST representation.
Generating RTLIL representation for module `\inv'.
Generating RTLIL representation for module `\buff'.
Generating RTLIL representation for module `\logic_0'.
Generating RTLIL representation for module `\logic_1'.
Generating RTLIL representation for module `\gclkbuff'.
Successfully finished Verilog frontend.

4.2. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/cells_sim.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/cells_sim.v' to AST representation.
Replacing existing blackbox module `\DFFRE' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/cells_sim.v:11.1-30.10.
Generating RTLIL representation for module `\DFFRE'.
Replacing existing blackbox module `\DFFNRE' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/cells_sim.v:37.1-56.10.
Generating RTLIL representation for module `\DFFNRE'.
Generating RTLIL representation for module `\ADDER_CARRY'.
Successfully finished Verilog frontend.

4.3. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v' to AST representation.
Replacing existing blackbox module `\LATCH' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v:20.1-34.10.
Generating RTLIL representation for module `\LATCH'.
Replacing existing blackbox module `\LATCHN' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v:48.1-62.10.
Generating RTLIL representation for module `\LATCHN'.
Replacing existing blackbox module `\LATCHR' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v:81.1-97.10.
Generating RTLIL representation for module `\LATCHR'.
Replacing existing blackbox module `\LATCHS' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v:115.1-131.10.
Generating RTLIL representation for module `\LATCHS'.
Replacing existing blackbox module `\LATCHNR' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v:150.1-166.10.
Generating RTLIL representation for module `\LATCHNR'.
Replacing existing blackbox module `\LATCHNS' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/llatches_sim.v:184.1-200.10.
Generating RTLIL representation for module `\LATCHNS'.
Generating RTLIL representation for module `\LATCHSRE'.
Generating RTLIL representation for module `\LATCHNSRE'.
Successfully finished Verilog frontend.

4.4. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v' to AST representation.
Replacing existing blackbox module `\RS_DSP' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v:12.1-90.10.
Generating RTLIL representation for module `\RS_DSP'.
Replacing existing blackbox module `\RS_DSP_MULT' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v:93.1-125.10.
Generating RTLIL representation for module `\RS_DSP_MULT'.
Replacing existing blackbox module `\RS_DSP_MULT_REGIN' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v:128.1-166.10.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN'.
Replacing existing blackbox module `\RS_DSP_MULT_REGOUT' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v:169.1-207.10.
Generating RTLIL representation for module `\RS_DSP_MULT_REGOUT'.
Replacing existing blackbox module `\RS_DSP_MULT_REGIN_REGOUT' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v:210.1-248.10.
Generating RTLIL representation for module `\RS_DSP_MULT_REGIN_REGOUT'.
Replacing existing blackbox module `\RS_DSP_MULTADD' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v:251.1-304.10.
Generating RTLIL representation for module `\RS_DSP_MULTADD'.
Replacing existing blackbox module `\RS_DSP_MULTADD_REGIN' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v:308.1-362.10.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN'.
Replacing existing blackbox module `\RS_DSP_MULTADD_REGOUT' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v:366.1-418.10.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGOUT'.
Replacing existing blackbox module `\RS_DSP_MULTADD_REGIN_REGOUT' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v:422.1-477.10.
Generating RTLIL representation for module `\RS_DSP_MULTADD_REGIN_REGOUT'.
Replacing existing blackbox module `\RS_DSP_MULTACC' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v:480.1-527.10.
Generating RTLIL representation for module `\RS_DSP_MULTACC'.
Replacing existing blackbox module `\RS_DSP_MULTACC_REGIN' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v:530.1-582.10.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN'.
Replacing existing blackbox module `\RS_DSP_MULTACC_REGOUT' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v:586.1-638.10.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGOUT'.
Replacing existing blackbox module `\RS_DSP_MULTACC_REGIN_REGOUT' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_sim.v:642.1-695.10.
Generating RTLIL representation for module `\RS_DSP_MULTACC_REGIN_REGOUT'.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Generating RTLIL representation for module `\dsp_t1_sim_cfg_ports'.
Successfully finished Verilog frontend.

4.5. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/LUT/LUT.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/LUT/LUT.v' to AST representation.
Replacing existing blackbox module `\LUT1' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/LUT/LUT.v:7.1-12.10.
Generating RTLIL representation for module `\LUT1'.
Replacing existing blackbox module `\LUT2' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/LUT/LUT.v:15.1-20.10.
Generating RTLIL representation for module `\LUT2'.
Replacing existing blackbox module `\LUT3' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/LUT/LUT.v:23.1-28.10.
Generating RTLIL representation for module `\LUT3'.
Replacing existing blackbox module `\LUT4' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/LUT/LUT.v:31.1-36.10.
Generating RTLIL representation for module `\LUT4'.
Replacing existing blackbox module `\LUT5' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/LUT/LUT.v:39.1-44.10.
Generating RTLIL representation for module `\LUT5'.
Replacing existing blackbox module `\LUT6' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/LUT/LUT.v:47.1-52.10.
Generating RTLIL representation for module `\LUT6'.
Successfully finished Verilog frontend.

4.6. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_sim.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_sim.v' to AST representation.
Generating RTLIL representation for module `\TDP_BRAM18'.
Replacing existing blackbox module `\RS_TDP36K' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_sim.v:113.1-641.10.
Generating RTLIL representation for module `\RS_TDP36K'.
Replacing existing blackbox module `\BRAM2x18_TDP' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_sim.v:642.1-1070.10.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Replacing existing blackbox module `\BRAM2x18_SDP' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_sim.v:1072.1-1481.10.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Replacing existing blackbox module `\_$_mem_v2_asymmetric' at /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_sim.v:1483.1-1886.10.
Generating RTLIL representation for module `\_$_mem_v2_asymmetric'.
Successfully finished Verilog frontend.

4.7. Executing HIERARCHY pass (managing design hierarchy).

4.7.1. Analyzing design hierarchy..
Top module:  \HD_ADPCM_Codec

4.7.2. Analyzing design hierarchy..
Top module:  \HD_ADPCM_Codec
Removed 0 unused modules.

4.8. Executing PROC pass (convert processes to netlists).

4.8.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.8.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.8.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

4.8.4. Executing PROC_INIT pass (extract init attributes).

4.8.5. Executing PROC_ARST pass (detect async resets in processes).

4.8.6. Executing PROC_ROM pass (convert switches to ROMs).
Converted 0 switches.

4.8.7. Executing PROC_MUX pass (convert decision trees to multiplexers).

4.8.8. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8.9. Executing PROC_DFF pass (convert process syncs to FFs).

4.8.10. Executing PROC_MEMWR pass (convert process memory writes to cells).

4.8.11. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.8.12. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~11 debug messages>

4.9. Executing DEMUXMAP pass.

4.10. Executing FLATTEN pass (flatten design).

4.11. Executing DEMUXMAP pass.

4.12. Executing TRIBUF pass.
Warning: Transforming tri-state at RTL line ghdl.cc:1029:import_module into pure logic:
         Functional Behavior may change.
Warning: Transforming tri-state at RTL line ghdl.cc:1030:import_module into pure logic:
         Functional Behavior may change.
Warning: Transforming tri-state at RTL line \299 into pure logic:
         Functional Behavior may change.

4.13. Executing TRIBUF pass.

4.14. Executing DEMINOUT pass (demote inout ports to input or output).

4.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 3 unused cells and 45 unused wires.
<suppressed ~4 debug messages>

4.17. Executing CHECK pass (checking for obvious problems).
Checking module HD_ADPCM_Codec...
Found and reported 0 problems.

4.18. Printing statistics.

=== HD_ADPCM_Codec ===

   Number of wires:                125
   Number of wire bits:            807
   Number of public wires:          51
   Number of public wire bits:     424
   Number of memories:               1
   Number of memory bits:           64
   Number of processes:              0
   Number of cells:                 95
     $add                            5
     $dff                           14
     $eq                             3
     $gt                            10
     $logic_not                      2
     $meminit                        1
     $memrd_v2                       1
     $mux                           42
     $not                            3
     $pmux                           3
     $sub                            4
     ADPCM_Decoder_1_Bit             2
     Flash_Memory_Driver             1
     I2C_Driver                      1
     I2S_Driver                      1
     LEDs_Bar_Driver                 1
     SevenSegments_Driver            1

4.19. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.20. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.21. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

4.22. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
    New ctrl vector for $pmux cell $auto$tribuf.cc:202:run$136: $auto$ghdl.cc:806:import_module$59 [2]
    New ctrl vector for $pmux cell $auto$tribuf.cc:202:run$138: $auto$ghdl.cc:806:import_module$59 [1]
    New ctrl vector for $pmux cell $auto$tribuf.cc:202:run$140: $auto$rtlil.cc:2384:Not$135
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 3 changes.

4.23. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.24. Executing OPT_SHARE pass.

4.25. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=14, #solve=0, #remove=0, time=0.00 sec.]

4.26. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.27. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~1 debug messages>

RUN-OPT ITERATIONS DONE : 1

4.28. Executing FSM pass (extract and optimize FSM).

4.28.1. Executing FSM_DETECT pass (finding FSMs in design).
Not marking HD_ADPCM_Codec.red_leds_bar as FSM state register:
    Users of register don't seem to benefit from recoding.

4.28.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.28.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.28.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

4.28.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.28.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.28.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.28.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.29. Executing WREDUCE pass (reducing word size of cells).
Removed top 29 bits (of 32) from port A of cell HD_ADPCM_Codec.\96 ($add).
Removed top 31 bits (of 32) from port B of cell HD_ADPCM_Codec.\96 ($add).
Removed top 29 bits (of 32) from port Y of cell HD_ADPCM_Codec.\96 ($add).
Removed top 21 bits (of 22) from port B of cell HD_ADPCM_Codec.\107 ($add).
Removed top 29 bits (of 32) from port A of cell HD_ADPCM_Codec.\110 ($sub).
Removed top 30 bits (of 32) from port B of cell HD_ADPCM_Codec.\110 ($sub).
Removed top 29 bits (of 32) from port Y of cell HD_ADPCM_Codec.\110 ($sub).
Removed top 3 bits (of 4) from mux cell HD_ADPCM_Codec.\137 ($mux).
Removed top 2 bits (of 4) from mux cell HD_ADPCM_Codec.\139 ($mux).
Removed top 2 bits (of 4) from mux cell HD_ADPCM_Codec.\141 ($mux).
Removed top 1 bits (of 4) from mux cell HD_ADPCM_Codec.\143 ($mux).
Removed top 1 bits (of 4) from mux cell HD_ADPCM_Codec.\145 ($mux).
Removed top 1 bits (of 4) from mux cell HD_ADPCM_Codec.\147 ($mux).
Removed top 1 bits (of 4) from mux cell HD_ADPCM_Codec.\149 ($mux).
Removed top 3 bits (of 25) from port B of cell HD_ADPCM_Codec.\164 ($eq).
Removed top 6 bits (of 7) from port B of cell HD_ADPCM_Codec.\169 ($add).
Removed top 6 bits (of 7) from port B of cell HD_ADPCM_Codec.\176 ($sub).
Removed top 29 bits (of 32) from port A of cell HD_ADPCM_Codec.\194 ($add).
Removed top 31 bits (of 32) from port B of cell HD_ADPCM_Codec.\194 ($add).
Removed top 29 bits (of 32) from port Y of cell HD_ADPCM_Codec.\194 ($add).
Removed top 24 bits (of 25) from port B of cell HD_ADPCM_Codec.\206 ($add).
Removed top 29 bits (of 32) from wire HD_ADPCM_Codec.$auto$ghdl.cc:806:import_module$22.
Removed top 29 bits (of 32) from wire HD_ADPCM_Codec.$auto$ghdl.cc:806:import_module$26.
Removed top 29 bits (of 32) from wire HD_ADPCM_Codec.$auto$ghdl.cc:806:import_module$63.
Removed top 9 bits (of 64) from wire HD_ADPCM_Codec.i2c_data_stream.

4.30. Executing PEEPOPT pass (run peephole optimizers).

4.31. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.32. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.33. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.34. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~12 debug messages>

4.35. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.36. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.37. Executing OPT_SHARE pass.

4.38. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on \252 ($dff) from module HD_ADPCM_Codec (D = $auto$ghdl.cc:806:import_module$25, Q = \flash_memory_address).
Adding EN signal on \249 ($dff) from module HD_ADPCM_Codec (D = 1'1, Q = \i2s_active_in).
Adding EN signal on \244 ($dff) from module HD_ADPCM_Codec (D = $auto$ghdl.cc:806:import_module$58, Q = \audio_codec_volume).
Adding EN signal on \242 ($dff) from module HD_ADPCM_Codec (D = $auto$ghdl.cc:806:import_module$103, Q = \i2c_register_data).
Adding SRST signal on $auto$ff.cc:294:slice$159 ($dffe) from module HD_ADPCM_Codec (D = { 1'x \audio_codec_volume }, Q = \i2c_register_data, rval = 8'00000000).
Adding EN signal on \240 ($dff) from module HD_ADPCM_Codec (D = $auto$ghdl.cc:806:import_module$94, Q = \i2c_register_address).
Adding EN signal on \237 ($dff) from module HD_ADPCM_Codec (D = $auto$ghdl.cc:806:import_module$66, Q = \i2c_active_in).
Adding SRST signal on \233 ($dff) from module HD_ADPCM_Codec (D = $auto$ghdl.cc:806:import_module$69, Q = \counter, rval = 25'0000000000000000000000000).
Adding SRST signal on \232 ($dff) from module HD_ADPCM_Codec (D = $auto$ghdl.cc:806:import_module$46 [1:0], Q = \red_leds_bar [1:0], rval = 2'10).
Adding SRST signal on \232 ($dff) from module HD_ADPCM_Codec (D = $auto$ghdl.cc:806:import_module$45 [3], Q = \red_leds_bar [3], rval = 1'1).
Adding SRST signal on \232 ($dff) from module HD_ADPCM_Codec (D = $auto$ghdl.cc:806:import_module$44 [2], Q = \red_leds_bar [2], rval = 1'0).
Adding SRST signal on \227 ($dff) from module HD_ADPCM_Codec (D = $auto$ghdl.cc:806:import_module$26, Q = \89.adpcm_bit_counter, rval = 3'110).
Adding EN signal on \226 ($dff) from module HD_ADPCM_Codec (D = $auto$ghdl.cc:806:import_module$65, Q = \89.i2c_stream_counter).
Adding SRST signal on $auto$ff.cc:294:slice$178 ($dffe) from module HD_ADPCM_Codec (D = $auto$ghdl.cc:806:import_module$63, Q = \89.i2c_stream_counter, rval = 3'000).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.39. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 17 unused cells and 17 unused wires.
<suppressed ~18 debug messages>

4.40. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.41. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.42. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.43. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.44. Executing OPT_SHARE pass.

4.45. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.46. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.47. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 2

4.48. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.49. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.50. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.51. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.52. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.53. Executing OPT_SHARE pass.

4.54. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.55. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.56. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

4.57. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.58. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.59. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.60. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.61. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.62. Executing OPT_SHARE pass.

4.63. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.64. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on $auto$ff.cc:294:slice$177 ($sdff) from module HD_ADPCM_Codec.
[#visit=16, #solve=81, #remove=1, time=0.01 sec.]

4.65. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.66. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~4 debug messages>

RUN-OPT ITERATIONS DONE : 1

4.67. Executing WREDUCE pass (reducing word size of cells).
Removed top 2 bits (of 4) from mux cell HD_ADPCM_Codec.\153 ($mux).
Removed top 3 bits (of 4) from wire HD_ADPCM_Codec.$auto$ghdl.cc:806:import_module$38.
Removed top 2 bits (of 4) from wire HD_ADPCM_Codec.$auto$ghdl.cc:806:import_module$40.
Removed top 1 bits (of 4) from wire HD_ADPCM_Codec.$auto$ghdl.cc:806:import_module$41.
Removed top 1 bits (of 4) from wire HD_ADPCM_Codec.$auto$ghdl.cc:806:import_module$43.
Removed top 1 bits (of 4) from wire HD_ADPCM_Codec.$auto$ghdl.cc:806:import_module$44.
Removed top 2 bits (of 4) from wire HD_ADPCM_Codec.$auto$ghdl.cc:806:import_module$46.

4.68. Executing PEEPOPT pass (run peephole optimizers).

4.69. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 10 unused wires.
<suppressed ~1 debug messages>

4.70. Executing DEMUXMAP pass.

4.71. Printing statistics.

=== HD_ADPCM_Codec ===

   Number of wires:                113
   Number of wire bits:            590
   Number of public wires:          51
   Number of public wire bits:     415
   Number of memories:               1
   Number of memory bits:           64
   Number of processes:              0
   Number of cells:                 85
     $add                            5
     $dff                            4
     $dffe                           5
     $eq                             3
     $gt                            10
     $logic_not                      2
     $meminit                        1
     $memrd_v2                       1
     $mux                           24
     $ne                             3
     $not                            4
     $reduce_and                     3
     $reduce_or                      3
     $sdff                           5
     $sdffce                         2
     $sub                            3
     ADPCM_Decoder_1_Bit             2
     Flash_Memory_Driver             1
     I2C_Driver                      1
     I2S_Driver                      1
     LEDs_Bar_Driver                 1
     SevenSegments_Driver            1

4.72. Executing RS_DSP_MULTADD pass.

4.73. Executing WREDUCE pass (reducing word size of cells).

4.74. Executing RS_DSP_MACC pass.

4.75. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.76. Executing TECHMAP pass (map to technology primitives).

4.76.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/mul2dsp.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/mul2dsp.v' to AST representation.
Generating RTLIL representation for module `\_80_mul'.
Generating RTLIL representation for module `\_90_soft_mul'.
Successfully finished Verilog frontend.

4.76.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

4.77. Printing statistics.

=== HD_ADPCM_Codec ===

   Number of wires:                113
   Number of wire bits:            590
   Number of public wires:          51
   Number of public wire bits:     415
   Number of memories:               1
   Number of memory bits:           64
   Number of processes:              0
   Number of cells:                 85
     $add                            5
     $dff                            4
     $dffe                           5
     $eq                             3
     $gt                            10
     $logic_not                      2
     $meminit                        1
     $memrd_v2                       1
     $mux                           24
     $ne                             3
     $not                            4
     $reduce_and                     3
     $reduce_or                      3
     $sdff                           5
     $sdffce                         2
     $sub                            3
     ADPCM_Decoder_1_Bit             2
     Flash_Memory_Driver             1
     I2C_Driver                      1
     I2S_Driver                      1
     LEDs_Bar_Driver                 1
     SevenSegments_Driver            1

4.78. Executing TECHMAP pass (map to technology primitives).

4.78.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_map.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_map.v' to AST representation.
Generating RTLIL representation for module `\$__RS_MUL20X18'.
Successfully finished Verilog frontend.

4.78.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

4.79. Executing TECHMAP pass (map to technology primitives).

4.79.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_final_map.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/dsp_final_map.v' to AST representation.
Generating RTLIL representation for module `\dsp_t1_20x18x64_cfg_ports'.
Successfully finished Verilog frontend.

4.79.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~3 debug messages>

4.80. Executing rs_pack_dsp_regs pass.

4.81. Executing RS_DSP_IO_REGS pass.

4.82. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module HD_ADPCM_Codec:
  creating $macc model for \107 ($add).
  creating $macc model for \110 ($sub).
  creating $macc model for \169 ($add).
  creating $macc model for \176 ($sub).
  creating $macc model for \181 ($sub).
  creating $macc model for \194 ($add).
  creating $macc model for \206 ($add).
  creating $macc model for \96 ($add).
  creating $alu model for $macc \96.
  creating $alu model for $macc \206.
  creating $alu model for $macc \194.
  creating $alu model for $macc \181.
  creating $alu model for $macc \176.
  creating $alu model for $macc \169.
  creating $alu model for $macc \110.
  creating $alu model for $macc \107.
  creating $alu model for \116 ($gt): new $alu
  creating $alu model for \118 ($gt): new $alu
  creating $alu model for \120 ($gt): new $alu
  creating $alu model for \122 ($gt): new $alu
  creating $alu model for \124 ($gt): new $alu
  creating $alu model for \126 ($gt): new $alu
  creating $alu model for \128 ($gt): new $alu
  creating $alu model for \130 ($gt): new $alu
  creating $alu model for \132 ($gt): new $alu
  creating $alu model for \134 ($gt): new $alu
  creating $alu model for \191 ($eq): merged with \181.
  creating $alu cell for \134: $auto$alumacc.cc:485:replace_alu$199
  creating $alu cell for \132: $auto$alumacc.cc:485:replace_alu$210
  creating $alu cell for \130: $auto$alumacc.cc:485:replace_alu$221
  creating $alu cell for \128: $auto$alumacc.cc:485:replace_alu$232
  creating $alu cell for \126: $auto$alumacc.cc:485:replace_alu$243
  creating $alu cell for \124: $auto$alumacc.cc:485:replace_alu$254
  creating $alu cell for \122: $auto$alumacc.cc:485:replace_alu$265
  creating $alu cell for \120: $auto$alumacc.cc:485:replace_alu$276
  creating $alu cell for \118: $auto$alumacc.cc:485:replace_alu$287
  creating $alu cell for \116: $auto$alumacc.cc:485:replace_alu$298
  creating $alu cell for \107: $auto$alumacc.cc:485:replace_alu$309
  creating $alu cell for \110: $auto$alumacc.cc:485:replace_alu$312
  creating $alu cell for \169: $auto$alumacc.cc:485:replace_alu$315
  creating $alu cell for \176: $auto$alumacc.cc:485:replace_alu$318
  creating $alu cell for \181, \191: $auto$alumacc.cc:485:replace_alu$321
  creating $alu cell for \194: $auto$alumacc.cc:485:replace_alu$326
  creating $alu cell for \206: $auto$alumacc.cc:485:replace_alu$329
  creating $alu cell for \96: $auto$alumacc.cc:485:replace_alu$332
  created 18 $alu and 0 $macc cells.

4.83. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~10 debug messages>

4.84. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.85. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.86. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
    New input vector for $reduce_and cell $auto$opt_dff.cc:221:make_patterns_logic$149: { $auto$alumacc.cc:501:replace_alu$322 $auto$ghdl.cc:806:import_module$48 \i2c_active_in }
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 1 changes.

4.87. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.88. Executing OPT_SHARE pass.

4.89. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.90. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 7 unused cells and 18 unused wires.
<suppressed ~8 debug messages>

4.91. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.92. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~7 debug messages>

4.93. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.94. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.95. Executing OPT_SHARE pass.

4.96. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=16, #solve=0, #remove=0, time=0.00 sec.]

4.97. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.98. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 2

4.99. Printing statistics.

=== HD_ADPCM_Codec ===

   Number of wires:                182
   Number of wire bits:            999
   Number of public wires:          51
   Number of public wire bits:     415
   Number of memories:               1
   Number of memory bits:           64
   Number of processes:              0
   Number of cells:                118
     $alu                           18
     $dff                            4
     $dffe                           5
     $eq                             2
     $logic_not                      2
     $meminit                        1
     $memrd_v2                       1
     $mux                           24
     $ne                             3
     $not                           17
     $or                            10
     $reduce_and                    14
     $reduce_or                      3
     $sdff                           5
     $sdffce                         2
     ADPCM_Decoder_1_Bit             2
     Flash_Memory_Driver             1
     I2C_Driver                      1
     I2S_Driver                      1
     LEDs_Bar_Driver                 1
     SevenSegments_Driver            1

4.100. Executing MEMORY pass.

4.100.1. Executing OPT_MEM pass (optimize memories).
HD_ADPCM_Codec.\256: removing const-0 lane 5
HD_ADPCM_Codec.\256: removing const-0 lane 6
HD_ADPCM_Codec.\256: removing const-0 lane 7
Performed a total of 1 transformations.

4.100.2. Executing OPT_MEM_PRIORITY pass (removing unnecessary memory write priority relations).
Performed a total of 0 transformations.

4.100.3. Executing OPT_MEM_FEEDBACK pass (finding memory read-to-write feedback paths).

4.100.4. Executing MEMORY_BMUX2ROM pass (converting muxes to ROMs).

4.100.5. Executing MEMORY_DFF pass (merging $dff cells to $memrd).
Checking read port `\256'[0] in module `\HD_ADPCM_Codec': merging output FF to cell.

4.100.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.100.7. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.100.8. Executing OPT_MEM_WIDEN pass (optimize memories where all ports are wide).
Performed a total of 0 transformations.

4.100.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.100.10. Executing MEMORY_COLLECT pass (generating $mem cells).

4.101. Printing statistics.

=== HD_ADPCM_Codec ===

   Number of wires:                187
   Number of wire bits:           1004
   Number of public wires:          51
   Number of public wire bits:     415
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                117
     $alu                           18
     $dff                            4
     $dffe                           5
     $eq                             2
     $logic_not                      2
     $mem_v2                         1
     $mux                           24
     $ne                             3
     $not                           17
     $or                            10
     $reduce_and                    14
     $reduce_or                      3
     $sdff                           5
     $sdffce                         2
     ADPCM_Decoder_1_Bit             2
     Flash_Memory_Driver             1
     I2C_Driver                      1
     I2S_Driver                      1
     LEDs_Bar_Driver                 1
     SevenSegments_Driver            1

4.102. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~21 debug messages>

4.103. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.104. Executing MEMORY_LIBMAP pass (mapping memories to cells).

4.105. Executing MEMORY_LIBMAP pass (mapping memories to cells).
using FF mapping for memory HD_ADPCM_Codec.\256
<suppressed ~104 debug messages>

4.106. Executing Rs_BRAM_Split pass.

4.107. Executing TECHMAP pass (map to technology primitives).

4.107.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_map_new.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_map_new.v' to AST representation.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_TDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM18_SDP'.
Generating RTLIL representation for module `\$__RS_FACTOR_BRAM36_SDP'.
Successfully finished Verilog frontend.

4.107.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~6 debug messages>

4.108. Executing TECHMAP pass (map to technology primitives).

4.108.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_final_map_new.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/brams_final_map_new.v' to AST representation.
Generating RTLIL representation for module `\BRAM2x18_TDP'.
Generating RTLIL representation for module `\BRAM2x18_SDP'.
Successfully finished Verilog frontend.

4.108.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~4 debug messages>

4.109. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

4.110. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.111. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.112. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.113. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.114. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.115. Executing OPT_SHARE pass.

4.116. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 5 on $auto$ff.cc:294:slice$167 ($dffe) from module HD_ADPCM_Codec.
Setting constant 0-bit at position 6 on $auto$ff.cc:294:slice$167 ($dffe) from module HD_ADPCM_Codec.
Setting constant 0-bit at position 7 on $auto$ff.cc:294:slice$167 ($dffe) from module HD_ADPCM_Codec.
[#visit=16, #solve=0, #remove=3, time=0.00 sec.]

4.117. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 1 unused cells and 6 unused wires.
<suppressed ~2 debug messages>

4.118. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.119. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~13 debug messages>

4.120. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.121. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.122. Executing OPT_SHARE pass.

4.123. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=15, #solve=0, #remove=0, time=0.00 sec.]

4.124. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.125. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 2

4.126. Executing PMUXTREE pass.

4.127. Executing MUXPACK pass ($mux cell cascades to $pmux).
Converted 0 (p)mux cells into 0 pmux cells.
<suppressed ~27 debug messages>

4.128. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \256 in module \HD_ADPCM_Codec:
  created 8 $dff cells and 0 static cells of width 5.
Extracted data FF from read port 0 of HD_ADPCM_Codec.\256: $\256$rdreg[0]
  read interface: 1 $dff and 7 $mux cells.
  write interface: 0 write mux blocks.

4.129. Executing TECHMAP pass (map to technology primitives).

4.129.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.129.2. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/arith_map.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/arith_map.v' to AST representation.
Generating RTLIL representation for module `\_80_rs_alu'.
Successfully finished Verilog frontend.

4.129.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $reduce_and.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
Using extmapper simplemap for cells of type $reduce_or.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $logic_not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $dffe.
Using extmapper simplemap for cells of type $ne.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $pos.
No more expansions possible.
<suppressed ~2289 debug messages>

4.130. Printing statistics.

=== HD_ADPCM_Codec ===

   Number of wires:               1120
   Number of wire bits:          24241
   Number of public wires:          59
   Number of public wire bits:     455
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1785
     $_AND_                        540
     $_DFFE_PP_                     47
     $_DFF_P_                       75
     $_MUX_                        292
     $_NOT_                        174
     $_OR_                         287
     $_XOR_                        363
     ADPCM_Decoder_1_Bit             2
     Flash_Memory_Driver             1
     I2C_Driver                      1
     I2S_Driver                      1
     LEDs_Bar_Driver                 1
     SevenSegments_Driver            1

4.131. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~1098 debug messages>

4.132. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
<suppressed ~681 debug messages>
Removed a total of 227 cells.

4.133. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.134. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.135. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.136. Executing OPT_SHARE pass.

4.137. Executing OPT_DFF pass (perform DFF optimizations).
Handling const CLK on HD_ADPCM_Codec:\256[0][0]_583 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[1][0]_1081 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[2][0]_985 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[3][0]_526 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[4][0]_531 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[5][0]_536 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[6][0]_919 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[7][0]_555 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[3][0]_522 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[3][0]_523 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[3][0]_524 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[3][0]_525 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[4][0]_527 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[4][0]_528 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[4][0]_529 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[4][0]_530 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[5][0]_532 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[5][0]_533 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[5][0]_534 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[5][0]_535 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[7][0]_551 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[7][0]_552 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[7][0]_553 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[7][0]_554 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[0][0]_579 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[0][0]_580 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[0][0]_581 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[0][0]_582 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[6][0]_915 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[6][0]_916 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[6][0]_917 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[6][0]_918 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[2][0]_981 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[2][0]_982 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[2][0]_983 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[2][0]_984 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[1][0]_1077 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[1][0]_1078 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[1][0]_1079 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
Handling const CLK on HD_ADPCM_Codec:\256[1][0]_1080 ($_DFF_P_) from module HD_ADPCM_Codec (removing D path).
[#visit=82, #solve=0, #remove=0, time=0.01 sec.]

4.138. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 113 unused cells and 980 unused wires.
<suppressed ~114 debug messages>

4.139. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~25 debug messages>

4.140. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.141. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.142. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

4.143. Executing OPT_SHARE pass.

4.144. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=82, #solve=0, #remove=0, time=0.00 sec.]

4.145. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.146. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.147. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.148. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.149. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.150. Executing OPT_SHARE pass.

4.151. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=82, #solve=0, #remove=0, time=0.00 sec.]

4.152. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.153. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 3

4.154. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~60 debug messages>

4.155. Executing TECHMAP pass (map to technology primitives).

4.155.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.155.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

4.156. Printing statistics.

=== HD_ADPCM_Codec ===

   Number of wires:                270
   Number of wire bits:           1065
   Number of public wires:          59
   Number of public wire bits:     455
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                503
     $_AND_                        179
     $_DFFE_PN_                     36
     $_DFFE_PP_                     11
     $_DFF_P_                       35
     $_MUX_                         41
     $_NOT_                         56
     $_OR_                          78
     $_XOR_                         60
     ADPCM_Decoder_1_Bit             2
     Flash_Memory_Driver             1
     I2C_Driver                      1
     I2S_Driver                      1
     LEDs_Bar_Driver                 1
     SevenSegments_Driver            1

4.157. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.158. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
<suppressed ~6 debug messages>
Removed a total of 2 cells.

4.159. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.160. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.161. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.162. Executing OPT_DFF pass (perform DFF optimizations).
Setting constant 0-bit at position 0 on HD_ADPCM_Codec:i2c_register_data[0]_980 ($_DFFE_PN_) from module HD_ADPCM_Codec.
[#visit=82, #solve=0, #remove=1, time=0.00 sec.]

4.163. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.164. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.165. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.166. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.167. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.168. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=81, #solve=0, #remove=0, time=0.00 sec.]

4.169. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.170. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 2

4.171. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.172. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.173. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.174. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.175. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.176. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=81, #solve=0, #remove=0, time=0.00 sec.]

4.177. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.178. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

4.179. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.180. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.181. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.182. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.183. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.184. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=81, #solve=0, #remove=0, time=0.00 sec.]

4.185. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=81, #solve=49, #remove=0, time=0.01 sec.]

4.186. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.187. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

4.188. Printing statistics.

=== HD_ADPCM_Codec ===

   Number of wires:                266
   Number of wire bits:           1043
   Number of public wires:          59
   Number of public wire bits:     455
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                500
     $_AND_                        178
     $_DFFE_PN_                     35
     $_DFFE_PP_                     11
     $_DFF_P_                       35
     $_MUX_                         41
     $_NOT_                         56
     $_OR_                          77
     $_XOR_                         60
     ADPCM_Decoder_1_Bit             2
     Flash_Memory_Driver             1
     I2C_Driver                      1
     I2S_Driver                      1
     LEDs_Bar_Driver                 1
     SevenSegments_Driver            1

   Number of Generic REGs:          81

ABC-DFF iteration : 1

4.189. Executing ABC pass (technology mapping using ABC).

4.189.1. Summary of detected clock domains:
  1 cells in clk={ }, en={ }, arst={ }, srst={ }
  3 cells in clk=\CLOCK_IN, en=$auto$opt_dff.cc:220:make_patterns_logic$148, arst={ }, srst={ }
  41 cells in clk=\CLOCK_IN, en=!$auto$simplemap.cc:257:simplemap_eqne$751, arst={ }, srst={ }
  80 cells in clk=\i2s_pcm_data_access, en=!$auto$simplemap.cc:169:logic_reduce$599, arst={ }, srst={ }
  144 cells in clk=\CLOCK_IN, en={ }, arst={ }, srst={ }
  76 cells in clk=\CLOCK_IN, en=$auto$opt_dff.cc:220:make_patterns_logic$157, arst={ }, srst={ }
  15 cells in clk=\CLOCK_IN, en=$auto$opt_dff.cc:220:make_patterns_logic$179, arst={ }, srst={ }
  140 cells in clk=\i2s_pcm_data_access, en={ }, arst={ }, srst={ }

  #logic partitions = 8

4.189.2. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN
Extracted 144 gates and 145 wires to a netlist network with 1 inputs and 39 outputs.

4.189.2.1. Executing ABC.

4.189.3. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \i2s_pcm_data_access
Extracted 136 gates and 155 wires to a netlist network with 17 inputs and 9 outputs.

4.189.3.1. Executing ABC.

4.189.4. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \i2s_pcm_data_access, enabled by !$auto$simplemap.cc:169:logic_reduce$599
Extracted 79 gates and 81 wires to a netlist network with 2 inputs and 23 outputs.

4.189.4.1. Executing ABC.

4.189.5. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $auto$opt_dff.cc:220:make_patterns_logic$157
Extracted 76 gates and 79 wires to a netlist network with 3 inputs and 8 outputs.

4.189.5.1. Executing ABC.

4.189.6. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by !$auto$simplemap.cc:257:simplemap_eqne$751
Extracted 40 gates and 68 wires to a netlist network with 27 inputs and 16 outputs.

4.189.6.1. Executing ABC.

4.189.7. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$3549$auto$opt_dff.cc:220:make_patterns_logic$179
Extracted 15 gates and 16 wires to a netlist network with 0 inputs and 7 outputs.

4.189.7.1. Executing ABC.

4.189.8. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $auto$opt_dff.cc:220:make_patterns_logic$148
Extracted 3 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

4.189.8.1. Executing ABC.

4.189.9. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.

4.190. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~18 debug messages>

4.191. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.192. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.193. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.194. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.195. Executing OPT_SHARE pass.

4.196. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=81, #solve=0, #remove=0, time=0.00 sec.]

4.197. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 415 unused wires.
<suppressed ~1 debug messages>

4.198. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

ABC-DFF iteration : 2

4.199. Executing ABC pass (technology mapping using ABC).

4.199.1. Summary of detected clock domains:
  1 cells in clk={ }, en={ }, arst={ }, srst={ }
  3 cells in clk=\CLOCK_IN, en=$abc$3618$auto$opt_dff.cc:220:make_patterns_logic$148, arst={ }, srst={ }
  17 cells in clk=\CLOCK_IN, en=$abc$3549$auto$opt_dff.cc:220:make_patterns_logic$179, arst={ }, srst={ }
  41 cells in clk=\CLOCK_IN, en=$abc$3501$auto$ghdl.cc:806:import_module$48, arst={ }, srst={ }
  43 cells in clk=\CLOCK_IN, en=$abc$3501$auto$opt_dff.cc:220:make_patterns_logic$157, arst={ }, srst={ }
  66 cells in clk=\i2s_pcm_data_access, en=!$abc$3338$auto$simplemap.cc:169:logic_reduce$599, arst={ }, srst={ }
  70 cells in clk=\i2s_pcm_data_access, en={ }, arst={ }, srst={ }
  140 cells in clk=\CLOCK_IN, en={ }, arst={ }, srst={ }

  #logic partitions = 8

4.199.2. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN
Extracted 140 gates and 141 wires to a netlist network with 1 inputs and 42 outputs.

4.199.2.1. Executing ABC.

4.199.3. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \i2s_pcm_data_access
Extracted 67 gates and 84 wires to a netlist network with 17 inputs and 11 outputs.

4.199.3.1. Executing ABC.

4.199.4. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \i2s_pcm_data_access, enabled by !$abc$3338$auto$simplemap.cc:169:logic_reduce$599
Extracted 65 gates and 67 wires to a netlist network with 2 inputs and 23 outputs.

4.199.4.1. Executing ABC.

4.199.5. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$3501$auto$opt_dff.cc:220:make_patterns_logic$157
Extracted 43 gates and 46 wires to a netlist network with 3 inputs and 11 outputs.

4.199.5.1. Executing ABC.

4.199.6. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$3501$auto$ghdl.cc:806:import_module$48
Extracted 40 gates and 69 wires to a netlist network with 29 inputs and 17 outputs.

4.199.6.1. Executing ABC.

4.199.7. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$3549$auto$opt_dff.cc:220:make_patterns_logic$179
Extracted 17 gates and 19 wires to a netlist network with 2 inputs and 12 outputs.

4.199.7.1. Executing ABC.

4.199.8. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$3618$auto$opt_dff.cc:220:make_patterns_logic$148
Extracted 2 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

4.199.8.1. Executing ABC.

4.199.9. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.

4.200. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~2 debug messages>

4.201. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.202. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.203. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.204. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.205. Executing OPT_SHARE pass.

4.206. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$4065$auto$blifparse.cc:362:parse_blif$4068 ($_DFFE_PP_) from module HD_ADPCM_Codec (D = $abc$4065$abc$3549$li04_li04, Q = $abc$4065$lo2).
[#visit=81, #solve=0, #remove=0, time=0.00 sec.]

4.207. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 1 unused cells and 518 unused wires.
<suppressed ~2 debug messages>

4.208. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

ABC-DFF iteration : 3

4.209. Executing ABC pass (technology mapping using ABC).

4.209.1. Summary of detected clock domains:
  1 cells in clk={ }, en={ }, arst={ }, srst={ }
  7 cells in clk=\CLOCK_IN, en=$auto$opt_dff.cc:220:make_patterns_logic$4092, arst={ }, srst={ }
  3 cells in clk=\CLOCK_IN, en=$abc$3618$auto$opt_dff.cc:220:make_patterns_logic$148, arst={ }, srst={ }
  9 cells in clk=\CLOCK_IN, en=$abc$3549$auto$opt_dff.cc:220:make_patterns_logic$179, arst={ }, srst={ }
  41 cells in clk=\CLOCK_IN, en=$abc$3501$auto$ghdl.cc:806:import_module$48, arst={ }, srst={ }
  39 cells in clk=\CLOCK_IN, en=$abc$3501$auto$opt_dff.cc:220:make_patterns_logic$157, arst={ }, srst={ }
  66 cells in clk=\i2s_pcm_data_access, en=!$abc$3338$auto$simplemap.cc:169:logic_reduce$599, arst={ }, srst={ }
  73 cells in clk=\i2s_pcm_data_access, en={ }, arst={ }, srst={ }
  140 cells in clk=\CLOCK_IN, en={ }, arst={ }, srst={ }

  #logic partitions = 9

4.209.2. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN
Extracted 140 gates and 141 wires to a netlist network with 1 inputs and 42 outputs.

4.209.2.1. Executing ABC.

4.209.3. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \i2s_pcm_data_access
Extracted 70 gates and 87 wires to a netlist network with 17 inputs and 11 outputs.

4.209.3.1. Executing ABC.

4.209.4. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \i2s_pcm_data_access, enabled by !$abc$3338$auto$simplemap.cc:169:logic_reduce$599
Extracted 65 gates and 67 wires to a netlist network with 2 inputs and 23 outputs.

4.209.4.1. Executing ABC.

4.209.5. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$3501$auto$ghdl.cc:806:import_module$48
Extracted 40 gates and 69 wires to a netlist network with 29 inputs and 17 outputs.

4.209.5.1. Executing ABC.

4.209.6. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$3501$auto$opt_dff.cc:220:make_patterns_logic$157
Extracted 39 gates and 42 wires to a netlist network with 3 inputs and 11 outputs.

4.209.6.1. Executing ABC.

4.209.7. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$3549$auto$opt_dff.cc:220:make_patterns_logic$179
Extracted 9 gates and 13 wires to a netlist network with 4 inputs and 7 outputs.

4.209.7.1. Executing ABC.

4.209.8. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $auto$opt_dff.cc:220:make_patterns_logic$4092
Extracted 7 gates and 10 wires to a netlist network with 3 inputs and 7 outputs.

4.209.8.1. Executing ABC.

4.209.9. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$3618$auto$opt_dff.cc:220:make_patterns_logic$148
Extracted 2 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

4.209.9.1. Executing ABC.

4.209.10. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.

4.210. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~4 debug messages>

4.211. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.212. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.213. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.214. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.215. Executing OPT_SHARE pass.

4.216. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=81, #solve=0, #remove=0, time=0.00 sec.]

4.217. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 520 unused wires.
<suppressed ~1 debug messages>

4.218. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

ABC-DFF iteration : 4

4.219. Executing ABC pass (technology mapping using ABC).

4.219.1. Summary of detected clock domains:
  1 cells in clk={ }, en={ }, arst={ }, srst={ }
  3 cells in clk=\CLOCK_IN, en=$abc$3618$auto$opt_dff.cc:220:make_patterns_logic$148, arst={ }, srst={ }
  7 cells in clk=\CLOCK_IN, en=$abc$4547$auto$opt_dff.cc:220:make_patterns_logic$4092, arst={ }, srst={ }
  9 cells in clk=\CLOCK_IN, en=$abc$3549$auto$opt_dff.cc:220:make_patterns_logic$179, arst={ }, srst={ }
  43 cells in clk=\CLOCK_IN, en=$abc$3501$auto$opt_dff.cc:220:make_patterns_logic$157, arst={ }, srst={ }
  37 cells in clk=\CLOCK_IN, en=$abc$3501$auto$ghdl.cc:806:import_module$48, arst={ }, srst={ }
  66 cells in clk=\i2s_pcm_data_access, en=!$abc$3338$auto$simplemap.cc:169:logic_reduce$599, arst={ }, srst={ }
  72 cells in clk=\i2s_pcm_data_access, en={ }, arst={ }, srst={ }
  140 cells in clk=\CLOCK_IN, en={ }, arst={ }, srst={ }

  #logic partitions = 9

4.219.2. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN
Extracted 140 gates and 141 wires to a netlist network with 1 inputs and 42 outputs.

4.219.2.1. Executing ABC.

4.219.3. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \i2s_pcm_data_access
Extracted 69 gates and 86 wires to a netlist network with 17 inputs and 11 outputs.

4.219.3.1. Executing ABC.

4.219.4. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \i2s_pcm_data_access, enabled by !$abc$3338$auto$simplemap.cc:169:logic_reduce$599
Extracted 65 gates and 67 wires to a netlist network with 2 inputs and 23 outputs.

4.219.4.1. Executing ABC.

4.219.5. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$3501$auto$opt_dff.cc:220:make_patterns_logic$157
Extracted 43 gates and 47 wires to a netlist network with 4 inputs and 15 outputs.

4.219.5.1. Executing ABC.

4.219.6. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$3501$auto$ghdl.cc:806:import_module$48
Extracted 36 gates and 65 wires to a netlist network with 29 inputs and 17 outputs.

4.219.6.1. Executing ABC.

4.219.7. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$3549$auto$opt_dff.cc:220:make_patterns_logic$179
Extracted 9 gates and 13 wires to a netlist network with 4 inputs and 7 outputs.

4.219.7.1. Executing ABC.

4.219.8. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$4547$auto$opt_dff.cc:220:make_patterns_logic$4092
Extracted 7 gates and 10 wires to a netlist network with 3 inputs and 7 outputs.

4.219.8.1. Executing ABC.

4.219.9. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$3618$auto$opt_dff.cc:220:make_patterns_logic$148
Extracted 2 gates and 5 wires to a netlist network with 2 inputs and 2 outputs.

4.219.9.1. Executing ABC.

4.219.10. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.

4.220. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~4 debug messages>

4.221. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.222. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.223. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.224. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.225. Executing OPT_SHARE pass.

4.226. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=81, #solve=0, #remove=0, time=0.00 sec.]

4.227. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 524 unused wires.
<suppressed ~1 debug messages>

4.228. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

4.229. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.
   Number of Generic REGs:          81

ABC-DFF iteration : 1

4.230. Executing ABC pass (technology mapping using ABC).

4.230.1. Summary of detected clock domains:
  1 cells in clk={ }, en={ }, arst={ }, srst={ }
  3 cells in clk=\CLOCK_IN, en=$auto$opt_dff.cc:220:make_patterns_logic$148, arst={ }, srst={ }
  41 cells in clk=\CLOCK_IN, en=!$auto$simplemap.cc:257:simplemap_eqne$751, arst={ }, srst={ }
  80 cells in clk=\i2s_pcm_data_access, en=!$auto$simplemap.cc:169:logic_reduce$599, arst={ }, srst={ }
  144 cells in clk=\CLOCK_IN, en={ }, arst={ }, srst={ }
  76 cells in clk=\CLOCK_IN, en=$auto$opt_dff.cc:220:make_patterns_logic$157, arst={ }, srst={ }
  15 cells in clk=\CLOCK_IN, en=$auto$opt_dff.cc:220:make_patterns_logic$179, arst={ }, srst={ }
  140 cells in clk=\i2s_pcm_data_access, en={ }, arst={ }, srst={ }

  #logic partitions = 8

4.230.2. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN
Extracted 144 gates and 145 wires to a netlist network with 1 inputs and 39 outputs.

4.230.2.1. Executing ABC.

4.230.3. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \i2s_pcm_data_access
Extracted 136 gates and 155 wires to a netlist network with 17 inputs and 9 outputs.

4.230.3.1. Executing ABC.

4.230.4. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \i2s_pcm_data_access, enabled by !$auto$simplemap.cc:169:logic_reduce$599
Extracted 79 gates and 81 wires to a netlist network with 2 inputs and 23 outputs.

4.230.4.1. Executing ABC.

4.230.5. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $auto$opt_dff.cc:220:make_patterns_logic$157
Extracted 76 gates and 79 wires to a netlist network with 3 inputs and 8 outputs.

4.230.5.1. Executing ABC.

4.230.6. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by !$auto$simplemap.cc:257:simplemap_eqne$751
Extracted 40 gates and 68 wires to a netlist network with 27 inputs and 16 outputs.

4.230.6.1. Executing ABC.

4.230.7. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $abc$5413$auto$opt_dff.cc:220:make_patterns_logic$179
Extracted 15 gates and 16 wires to a netlist network with 0 inputs and 7 outputs.

4.230.7.1. Executing ABC.

4.230.8. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN, enabled by $auto$opt_dff.cc:220:make_patterns_logic$148
Extracted 3 gates and 7 wires to a netlist network with 3 inputs and 2 outputs.

4.230.8.1. Executing ABC.

4.230.9. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.

4.231. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=81, #solve=0, #remove=0, time=0.00 sec.]

4.232. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~18 debug messages>

4.233. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 415 unused wires.
<suppressed ~1 debug messages>

4.234. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=81, #solve=0, #remove=0, time=0.00 sec.]

4.235. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.236. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.237. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=81, #solve=0, #remove=0, time=0.00 sec.]

4.238. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.239. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.240. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

ABC-DFF iteration : 2

4.241. Executing ABC pass (technology mapping using ABC).

4.241.1. Summary of detected clock domains:
  1 cells in clk={ }, en={ }, arst={ }, srst={ }
  159 cells in clk=\i2s_pcm_data_access, en={ }, arst={ }, srst={ }
  267 cells in clk=\CLOCK_IN, en={ }, arst={ }, srst={ }

  #logic partitions = 3

4.241.2. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN
Extracted 266 gates and 269 wires to a netlist network with 2 inputs and 56 outputs.

4.241.2.1. Executing ABC.

4.241.3. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \i2s_pcm_data_access
Extracted 154 gates and 170 wires to a netlist network with 16 inputs and 33 outputs.

4.241.3.1. Executing ABC.

4.241.4. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.

4.242. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.243. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~2 debug messages>

4.244. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 517 unused wires.
<suppressed ~1 debug messages>

4.245. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.246. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.247. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.248. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$5581$auto$blifparse.cc:362:parse_blif$5604 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$5581$new_n331_, Q = \audio_codec_volume [1]).
Adding EN signal on $abc$5581$auto$blifparse.cc:362:parse_blif$5597 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$5581$new_n267_, Q = \i2c_register_address [0]).
Adding EN signal on $abc$5581$auto$blifparse.cc:362:parse_blif$5596 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$5581$new_n292_, Q = $abc$5413$lo02).
Adding EN signal on $abc$5581$auto$blifparse.cc:362:parse_blif$5595 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$5581$new_n290_, Q = \i2c_register_address [2]).
Adding EN signal on $abc$5581$auto$blifparse.cc:362:parse_blif$5593 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$5581$new_n213_, Q = $abc$5413$lo05).
Adding EN signal on $abc$5581$auto$blifparse.cc:362:parse_blif$5592 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$5581$new_n282_, Q = $abc$5413$lo06).
Adding EN signal on $abc$5581$auto$blifparse.cc:362:parse_blif$5591 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$5581$new_n280_, Q = \i2c_register_data [1]).
Adding EN signal on $abc$5581$auto$blifparse.cc:362:parse_blif$5590 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$5581$new_n278_, Q = \i2c_register_data [2]).
Adding EN signal on $abc$5581$auto$blifparse.cc:362:parse_blif$5589 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$5581$new_n276_, Q = \i2c_register_data [3]).
Adding EN signal on $abc$5581$auto$blifparse.cc:362:parse_blif$5588 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$5581$new_n274_, Q = \i2c_register_data [4]).
Adding EN signal on $abc$5581$auto$blifparse.cc:362:parse_blif$5587 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$5581$new_n272_, Q = \i2c_register_data [5]).
Adding EN signal on $abc$5581$auto$blifparse.cc:362:parse_blif$5586 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$5581$new_n270_, Q = \i2c_register_data [6]).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.249. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.250. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 12 unused cells and 12 unused wires.
<suppressed ~13 debug messages>

4.251. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

ABC-DFF iteration : 3

4.252. Executing ABC pass (technology mapping using ABC).

4.252.1. Summary of detected clock domains:
  1 cells in clk={ }, en={ }, arst={ }, srst={ }
  155 cells in clk=\i2s_pcm_data_access, en={ }, arst={ }, srst={ }
  246 cells in clk=\CLOCK_IN, en={ }, arst={ }, srst={ }

  #logic partitions = 3

4.252.2. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN
Extracted 245 gates and 247 wires to a netlist network with 2 inputs and 55 outputs.

4.252.2.1. Executing ABC.

4.252.3. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \i2s_pcm_data_access
Extracted 150 gates and 166 wires to a netlist network with 16 inputs and 32 outputs.

4.252.3.1. Executing ABC.

4.252.4. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.

4.253. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.254. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~2 debug messages>

4.255. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 492 unused wires.
<suppressed ~1 debug messages>

4.256. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.257. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.258. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.259. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$6096$auto$blifparse.cc:362:parse_blif$6107 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6096$new_n293_, Q = $abc$5413$lo05).
Adding EN signal on $abc$6096$auto$blifparse.cc:362:parse_blif$6106 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6096$new_n291_, Q = $abc$5413$lo06).
Adding EN signal on $abc$6096$auto$blifparse.cc:362:parse_blif$6105 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6096$new_n289_, Q = \audio_codec_volume [1]).
Adding EN signal on $abc$6096$auto$blifparse.cc:362:parse_blif$6104 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6096$new_n212_, Q = \i2c_register_address [0]).
Adding EN signal on $abc$6096$auto$blifparse.cc:362:parse_blif$6103 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6096$new_n267_, Q = \i2c_register_address [2]).
Adding EN signal on $abc$6096$auto$blifparse.cc:362:parse_blif$6102 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6096$new_n264_, Q = \i2c_register_data [1]).
Adding EN signal on $abc$6096$auto$blifparse.cc:362:parse_blif$6101 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6096$new_n262_, Q = \i2c_register_data [2]).
Adding EN signal on $abc$6096$auto$blifparse.cc:362:parse_blif$6100 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6096$new_n260_, Q = \i2c_register_data [3]).
Adding EN signal on $abc$6096$auto$blifparse.cc:362:parse_blif$6099 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6096$new_n258_, Q = \i2c_register_data [4]).
Adding EN signal on $abc$6096$auto$blifparse.cc:362:parse_blif$6098 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6096$new_n256_, Q = \i2c_register_data [5]).
Adding EN signal on $abc$6096$auto$blifparse.cc:362:parse_blif$6097 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6096$new_n215_, Q = \i2c_register_data [6]).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.260. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.261. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 11 unused cells and 11 unused wires.
<suppressed ~12 debug messages>

4.262. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

ABC-DFF iteration : 4

4.263. Executing ABC pass (technology mapping using ABC).

4.263.1. Summary of detected clock domains:
  1 cells in clk={ }, en={ }, arst={ }, srst={ }
  153 cells in clk=\i2s_pcm_data_access, en={ }, arst={ }, srst={ }
  237 cells in clk=\CLOCK_IN, en={ }, arst={ }, srst={ }

  #logic partitions = 3

4.263.2. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \CLOCK_IN
Extracted 236 gates and 238 wires to a netlist network with 2 inputs and 55 outputs.

4.263.2.1. Executing ABC.

4.263.3. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Found matching posedge clock domain: \i2s_pcm_data_access
Extracted 148 gates and 164 wires to a netlist network with 16 inputs and 32 outputs.

4.263.3.1. Executing ABC.

4.263.4. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
No matching clock domain found. Not extracting any FF cells.
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.

4.264. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.265. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.266. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 481 unused wires.
<suppressed ~1 debug messages>

4.267. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.268. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.269. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.270. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on $abc$6595$auto$blifparse.cc:362:parse_blif$6606 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n294_, Q = $abc$5413$lo05).
Adding EN signal on $abc$6595$auto$blifparse.cc:362:parse_blif$6605 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n292_, Q = $abc$5413$lo06).
Adding EN signal on $abc$6595$auto$blifparse.cc:362:parse_blif$6603 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n212_, Q = \i2c_register_address [0]).
Adding EN signal on $abc$6595$auto$blifparse.cc:362:parse_blif$6602 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n269_, Q = \i2c_register_address [2]).
Adding EN signal on $abc$6595$auto$blifparse.cc:362:parse_blif$6601 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n266_, Q = \i2c_register_data [1]).
Adding EN signal on $abc$6595$auto$blifparse.cc:362:parse_blif$6600 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n264_, Q = \i2c_register_data [2]).
Adding EN signal on $abc$6595$auto$blifparse.cc:362:parse_blif$6599 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n262_, Q = \i2c_register_data [3]).
Adding EN signal on $abc$6595$auto$blifparse.cc:362:parse_blif$6598 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n260_, Q = \i2c_register_data [4]).
Adding EN signal on $abc$6595$auto$blifparse.cc:362:parse_blif$6597 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n258_, Q = \i2c_register_data [5]).
Adding EN signal on $abc$6595$auto$blifparse.cc:362:parse_blif$6596 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n215_, Q = \i2c_register_data [6]).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.271. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.272. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 10 unused cells and 10 unused wires.
<suppressed ~11 debug messages>

4.273. Executing DFFUNMAP pass (unmap clock enable and synchronous reset from FFs).

4.274. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 0 inverters.
select CE dissolving strategy (tresh=0.920000)

4.275. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.276. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

4.277. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.278. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.279. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.280. Executing OPT_SHARE pass.

4.281. Executing OPT_DFF pass (perform DFF optimizations).
Adding EN signal on HD_ADPCM_Codec:i2c_register_data[6]_7065 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n215_, Q = \i2c_register_data [6]).
Adding EN signal on HD_ADPCM_Codec:$abc$5413$lo05_7056 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n294_, Q = $abc$5413$lo05).
Adding EN signal on HD_ADPCM_Codec:$abc$5413$lo06_7057 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n292_, Q = $abc$5413$lo06).
Adding EN signal on HD_ADPCM_Codec:i2c_register_address[0]_7058 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n212_, Q = \i2c_register_address [0]).
Adding EN signal on HD_ADPCM_Codec:i2c_register_address[2]_7059 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n269_, Q = \i2c_register_address [2]).
Adding EN signal on HD_ADPCM_Codec:i2c_register_data[1]_7060 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n266_, Q = \i2c_register_data [1]).
Adding EN signal on HD_ADPCM_Codec:i2c_register_data[2]_7061 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n264_, Q = \i2c_register_data [2]).
Adding EN signal on HD_ADPCM_Codec:i2c_register_data[3]_7062 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n262_, Q = \i2c_register_data [3]).
Adding EN signal on HD_ADPCM_Codec:i2c_register_data[4]_7063 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n260_, Q = \i2c_register_data [4]).
Adding EN signal on HD_ADPCM_Codec:i2c_register_data[5]_7064 ($_DFF_P_) from module HD_ADPCM_Codec (D = $abc$6595$new_n258_, Q = \i2c_register_data [5]).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.282. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 10 unused cells and 11 unused wires.
<suppressed ~11 debug messages>

4.283. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.284. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.285. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.286. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.287. Executing OPT_SHARE pass.

4.288. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.289. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.290. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 2

4.291. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.292. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.293. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.294. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.295. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.296. Executing OPT_SHARE pass.

4.297. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.298. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.299. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

4.300. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.301. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.302. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.303. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.304. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.305. Executing OPT_SHARE pass.

4.306. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.307. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=79, #remove=0, time=0.02 sec.]

4.308. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.309. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

4.310. Executing BMUXMAP pass.

4.311. Executing DEMUXMAP pass.

4.312. Executing ABC pass (technology mapping using ABC).

4.312.1. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Extracted 289 gates and 372 wires to a netlist network with 83 inputs and 87 outputs.

4.312.1.1. Executing ABC.
DE:   #PIs =  83  #Luts =   127  Max Lvl =   5  Avg Lvl =   2.51  [   0.08 sec. at Pass 0]{firstMap}[1]
DE:   #PIs =  83  #Luts =   121  Max Lvl =   3  Avg Lvl =   1.95  [   0.28 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs =  83  #Luts =   120  Max Lvl =   3  Avg Lvl =   1.97  [   0.24 sec. at Pass 2]{map}[6]
DE:   #PIs =  83  #Luts =   116  Max Lvl =   3  Avg Lvl =   1.99  [   0.19 sec. at Pass 3]{postMap}[12]
DE:   #PIs =  83  #Luts =   113  Max Lvl =   3  Avg Lvl =   2.13  [   0.27 sec. at Pass 4]{map}[16]
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.25 sec. at Pass 5]{postMap}[16]
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.22 sec. at Pass 6]{map}[16]
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.25 sec. at Pass 7]{postMap}[16]
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.23 sec. at Pass 8]{map}[16]
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.00 sec. at Pass 9]{pushMap}[0]
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.00 sec. at Pass 10]{finalMap}[0]

4.313. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.314. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.315. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.316. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.317. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.318. Executing OPT_SHARE pass.

4.319. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.320. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 372 unused wires.
<suppressed ~1 debug messages>

4.321. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

4.322. Executing OPT_FFINV pass (push inverters through FFs).
Discovering LUTs.
Pushed 1 inverters.

4.323. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.324. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.325. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.326. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.327. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.328. Executing OPT_SHARE pass.

4.329. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.330. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.331. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

4.332. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.333. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.334. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.335. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.336. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.337. Executing OPT_SHARE pass.

4.338. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=0, #remove=0, time=0.00 sec.]

4.339. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=79, #solve=79, #remove=0, time=0.03 sec.]

4.340. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..

4.341. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

4.342. Printing statistics.

=== HD_ADPCM_Codec ===

   Number of wires:                170
   Number of wire bits:            566
   Number of public wires:          59
   Number of public wire bits:     455
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                195
     $_DFFE_PN_                     10
     $_DFF_P_                       69
     $lut                          109
     ADPCM_Decoder_1_Bit             2
     Flash_Memory_Driver             1
     I2C_Driver                      1
     I2S_Driver                      1
     LEDs_Bar_Driver                 1
     SevenSegments_Driver            1

4.343. Executing DFFLEGALIZE pass (convert FFs to types supported by the target).

4.344. Executing RS_DFFSR_CONV pass.

4.345. Printing statistics.

=== HD_ADPCM_Codec ===

   Number of wires:                172
   Number of wire bits:            568
   Number of public wires:          59
   Number of public wire bits:     455
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                197
     $_DFFE_PP0N_                   10
     $_DFF_P_                       69
     $_NOT_                          2
     $lut                          109
     ADPCM_Decoder_1_Bit             2
     Flash_Memory_Driver             1
     I2C_Driver                      1
     I2S_Driver                      1
     LEDs_Bar_Driver                 1
     SevenSegments_Driver            1

4.346. Executing TECHMAP pass (map to technology primitives).

4.346.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.346.2. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/ffs_map.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/ffs_map.v' to AST representation.
Generating RTLIL representation for module `\$_DFF_P_'.
Generating RTLIL representation for module `\$_DFF_PP0_'.
Generating RTLIL representation for module `\$_DFF_PN0_'.
Generating RTLIL representation for module `\$_DFF_PP1_'.
Generating RTLIL representation for module `\$_DFF_PN1_'.
Generating RTLIL representation for module `\$_DFFE_PP_'.
Generating RTLIL representation for module `\$_DFFE_PN_'.
Generating RTLIL representation for module `\$_DFFE_PP0P_'.
Generating RTLIL representation for module `\$_DFFE_PP0N_'.
Generating RTLIL representation for module `\$_DFFE_PN0P_'.
Generating RTLIL representation for module `\$_DFFE_PN0N_'.
Generating RTLIL representation for module `\$_DFFE_PP1P_'.
Generating RTLIL representation for module `\$_DFFE_PP1N_'.
Generating RTLIL representation for module `\$_DFFE_PN1P_'.
Generating RTLIL representation for module `\$_DFFE_PN1N_'.
Generating RTLIL representation for module `\$_DFF_N_'.
Generating RTLIL representation for module `\$_DFF_NP0_'.
Generating RTLIL representation for module `\$_DFF_NN0_'.
Generating RTLIL representation for module `\$_DFF_NP1_'.
Generating RTLIL representation for module `\$_DFF_NN1_'.
Generating RTLIL representation for module `\$_DFFE_NP_'.
Generating RTLIL representation for module `\$_DFFE_NN_'.
Generating RTLIL representation for module `\$_DFFE_NP0P_'.
Generating RTLIL representation for module `\$_DFFE_NP0N_'.
Generating RTLIL representation for module `\$_DFFE_NN0P_'.
Generating RTLIL representation for module `\$_DFFE_NN0N_'.
Generating RTLIL representation for module `\$_DFFE_NP1P_'.
Generating RTLIL representation for module `\$_DFFE_NP1N_'.
Generating RTLIL representation for module `\$_DFFE_NN1P_'.
Generating RTLIL representation for module `\$_DFFE_NN1N_'.
Generating RTLIL representation for module `\$__SHREG_DFF_P_'.
Generating RTLIL representation for module `\$_SDFF_PP0_'.
Generating RTLIL representation for module `\$_SDFF_PN0_'.
Generating RTLIL representation for module `\$_SDFF_NP0_'.
Generating RTLIL representation for module `\$_SDFF_NN0_'.
Generating RTLIL representation for module `\$_SDFF_PP1_'.
Generating RTLIL representation for module `\$_SDFF_PN1_'.
Generating RTLIL representation for module `\$_SDFF_NP1_'.
Generating RTLIL representation for module `\$_SDFF_NN1_'.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Generating RTLIL representation for module `\$_DLATCH_PP0_'.
Generating RTLIL representation for module `\$_DLATCH_PN0_'.
Generating RTLIL representation for module `\$_DLATCH_NP0_'.
Generating RTLIL representation for module `\$_DLATCH_NN0_'.
Generating RTLIL representation for module `\$_DLATCH_PP1_'.
Generating RTLIL representation for module `\$_DLATCH_PN1_'.
Generating RTLIL representation for module `\$_DLATCH_NP1_'.
Generating RTLIL representation for module `\$_DLATCH_NN1_'.
Successfully finished Verilog frontend.

4.346.3. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $lut.
Using extmapper simplemap for cells of type $logic_not.
No more expansions possible.
<suppressed ~328 debug messages>

4.347. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~2528 debug messages>

4.348. Executing SIMPLEMAP pass (map simple cells to gate primitives).

4.349. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.350. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
<suppressed ~564 debug messages>
Removed a total of 188 cells.

4.351. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=0, #solve=0, #remove=0, time=0.00 sec.]

4.352. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 523 unused wires.
<suppressed ~1 debug messages>

4.353. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.
<suppressed ~4 debug messages>

4.354. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.355. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.356. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.357. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.358. Executing OPT_SHARE pass.

4.359. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=0, #solve=0, #remove=0, time=0.00 sec.]

4.360. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

4.361. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

4.362. Executing TECHMAP pass (map to technology primitives).

4.362.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/techmap.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_demux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.362.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~71 debug messages>

4.363. Executing ABC pass (technology mapping using ABC).

4.363.1. Extracting gate netlist of module `\HD_ADPCM_Codec' to `<abc-temp-dir>/input.blif'..
Extracted 457 gates and 542 wires to a netlist network with 83 inputs and 87 outputs.

4.363.1.1. Executing ABC.
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.07 sec. at Pass 0]{firstMap}[1]
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.26 sec. at Pass 1]{initMapFlow}[2]
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.20 sec. at Pass 2]{map}[6]
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.18 sec. at Pass 3]{postMap}[12]
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.26 sec. at Pass 4]{map}[16]
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.23 sec. at Pass 5]{postMap}[16]
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.00 sec. at Pass 6]{pushMap}[0]
DE:   #PIs =  83  #Luts =   110  Max Lvl =   3  Avg Lvl =   1.94  [   0.00 sec. at Pass 7]{finalMap}[0]

4.364. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

4.365. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.366. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \HD_ADPCM_Codec..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

4.367. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \HD_ADPCM_Codec.
Performed a total of 0 changes.

4.368. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\HD_ADPCM_Codec'.
Removed a total of 0 cells.

4.369. Executing OPT_SHARE pass.

4.370. Executing OPT_DFF pass (perform DFF optimizations).
[#visit=0, #solve=0, #remove=0, time=0.00 sec.]

4.371. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 416 unused wires.
<suppressed ~1 debug messages>

4.372. Executing OPT_EXPR pass (perform const folding).
Optimizing module HD_ADPCM_Codec.

RUN-OPT ITERATIONS DONE : 1

4.373. Executing HIERARCHY pass (managing design hierarchy).

4.373.1. Analyzing design hierarchy..
Top module:  \HD_ADPCM_Codec

4.373.2. Analyzing design hierarchy..
Top module:  \HD_ADPCM_Codec
Removed 0 unused modules.

4.374. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \HD_ADPCM_Codec..
Removed 0 unused cells and 20 unused wires.
<suppressed ~20 debug messages>

4.375. Printing statistics.

=== HD_ADPCM_Codec ===

   Number of wires:                151
   Number of wire bits:            321
   Number of public wires:          39
   Number of public wire bits:     209
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                196
     $lut                          110
     ADPCM_Decoder_1_Bit             2
     DFFRE                          79
     Flash_Memory_Driver             1
     I2C_Driver                      1
     I2S_Driver                      1
     LEDs_Bar_Driver                 1
     SevenSegments_Driver            1

4.376. Executing TECHMAP pass (map to technology primitives).

4.376.1. Executing Verilog-2005 frontend: /nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/TECHMAP/lut_map.v
Parsing Verilog input from `/nfs_eda_sw/softwares/Raptor/instl_dir/10_17_2023_09_15_01/bin/../share/yosys/rapidsilicon/genesis3/RS_PRIMITIVES/TECHMAP/lut_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Successfully finished Verilog frontend.

4.376.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~672 debug messages>

4.377. Printing statistics.

=== HD_ADPCM_Codec ===

   Number of wires:                371
   Number of wire bits:            906
   Number of public wires:          39
   Number of public wire bits:     209
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                196
     ADPCM_Decoder_1_Bit             2
     DFFRE                          79
     Flash_Memory_Driver             1
     I2C_Driver                      1
     I2S_Driver                      1
     LEDs_Bar_Driver                 1
     LUT1                            9
     LUT2                            5
     LUT3                           13
     LUT4                           30
     LUT5                           21
     LUT6                           32
     SevenSegments_Driver            1

   Number of LUTs:                 110
   Number of REGs:                  79
   Number of CARRY ADDERs:           0

5. Executing Verilog backend.
Dumping module `\HD_ADPCM_Codec'.

6. Executing BLIF backend.

Warnings: 3 unique messages, 3 total
End of script. Logfile hash: c70d73ed90, CPU: user 2.51s system 0.14s, MEM: 40.81 MB peak
Yosys 0.18+10 (git sha1 b3f40b448, gcc 11.2.1 -fPIC -Os)
Time spent: 92% 10x abc (30 sec), 2% 78x opt_expr (0 sec), ...
